@model ClienteVM

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutForms.cshtml";
}

@*@section pagestyle
    {
        @<style>
            .project-tab {
                padding: 10%;
                margin-top: -8%;
            }

                .project-tab #tabs {
                    background: #007b5e;
                    color: #eee;
                }

                    .project-tab #tabs h6.section-title {
                        color: #eee;
                    }

                    .project-tab #tabs .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active {
                        color: #0062cc;
                        background-color: transparent;
                        border-color: transparent transparent #f3f3f3;
                        border-bottom: 3px solid !important;
                        font-size: 16px;
                        font-weight: bold;
                    }

                .project-tab .nav-link {
                    border: 1px solid transparent;
                    border-top-left-radius: .25rem;
                    border-top-right-radius: .25rem;
                    color: #0062cc;
                    font-size: 16px;
                    font-weight: 600;
                }

                    .project-tab .nav-link:hover {
                        border: none;
                    }

                .project-tab thead {
                    background: #f3f3f3;
                    color: #333;
                }

                .project-tab a {
                    text-decoration: none;
                    color: #333;
                    font-weight: 600;
                }
        </style>
    }*@

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmCreateCliente" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <div class="row col-md-offset-2 col-md-10">
            <input id="btnSubmit" type="button" value="Guardar Cliente" class="btn btn-outline-info" />
            @*<input id="btnNextTabPane" type="button" value="proximo panel" class="btn btn-outline-info" />*@
            @*@Html.ActionLink("Listado Clientes", "Search", null, new { @class = "btn btn-outline-info" })*@
            <span id="mensajeError" class="text-danger">@Model.MensajeError </span>
        </div>
        @*navigation*@
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="">
            <div class="col-md-12 col-sm-12  ">
                <div class="x_panel">
                    <div class="x_title">
                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content">

                        <ul class="nav nav-tabs bar_tabs" id="myTab" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="datosPersonales-tab" data-toggle="tab" href="#datosPersonales" role="tab" aria-controls="datosPersonales" aria-selected="true">Datos Personales</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="direccion-tab" data-toggle="tab" href="#direccion" role="tab" aria-controls="direccion" aria-selected="false">Direccion</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="datosLaborales-tab" data-toggle="tab" href="#datosLaborales" role="tab" aria-controls="datosLaborales" aria-selected="false">Datos Laborales</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="datosConyuge-tab" data-toggle="tab" href="#datosConyuge" role="tab" aria-controls="datosConyuge" aria-selected="false">Datos del Conyuge</a>
                            </li>
                        </ul>
                        <div class="tab-content" id="myTabContent">
                            <div class="tab-pane fade show active" id="datosPersonales" role="tabpanel" aria-labelledby="datosPersonales-tab">
                                @Html.Partial("_infoGenerales", Model)
                            </div>
                            <div class="tab-pane fade" id="direccion" role="tabpanel" aria-labelledby="direccion-tab">
                                @Html.Partial("_infoDireccion", Model)
                            </div>
                            <div class="tab-pane fade" id="datosLaborales" role="tabpanel" aria-labelledby="datosLaborales-tab">
                                @*@Html.Partial("_infoLaboral", Model)*@
                                @Html.Partial("_infoLaboral", Model)
                            </div>
                            <div class="tab-pane fade" id="datosConyuge" role="tabpanel" aria-labelledby="datosConyuge-tab">
                                @Html.Partial("_infoConyuge", Model)
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @*<div class="tab-content" id="nav-tabContent">
                    <div class="tab-pane fade show active" id="nav-generales" role="tabpanel" aria-labelledby="nav-generales-tab">
                        @Html.Partial("_infoGenerales", Model)
                    </div>
                    <div class="tab-pane fade show" id="nav-direccion" role="tabpanel" aria-labelledby="nav-direccion-tab">
                        @Html.Partial("_infoDireccion", Model)
                    </div>
                     TODO: faltan campos como comentarios, etc.
                    <div class="tab-pane fade show" id="nav-trabajo" role="tabpanel" aria-labelledby="nav-trabajo-tab">
                        @Html.Partial("_infoLaboral", Model)
                    </div>
                    <div class="tab-pane fade show " id="nav-conyuge" role="tabpanel" aria-labelledby="nav-conyuge-tab">
                        @Html.Partial("_infoConyuge", Model)
                    </div>
                </div>*@
        </div>
    </div>
}

@section scripts
{
    <script>

    let locations;

    $(".target").keyup(function () {
        searchText($('#searchinput').val());
    });

    async function searchText(location) {
        try {
            const res = await search(location);
            showList(JSON.parse(res));
            setClickListener();
        } catch (err) {

        }
    }

    function search(location) {

        let dataValue = { "searchtotext": location };
        let LocalidadABuscar;

        return $.ajax({
            type: "get",
            url: "/Localidades/BuscarLocalidad",
            data: dataValue,
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                console.log("Request: " + XMLHttpRequest.toString() + "\n\nStatus: " + textStatus + "\n\nError: " + errorThrown);
            },
            complete: function (jqXHR, status) {
            }
        });
    }

    function setClickListener() {
        const list = document.querySelectorAll('#listaddresses');
        list.forEach(function (btn) {
            btn.addEventListener('click', function (evt) {

                // Aqui consigues el ID de la localidad seleccionada
                LocalidadABuscar = evt.target.getAttribute('data-idlocalidad');
                $('#iddelocalidad').text(` El ID de la localidad es:  ${evt.target.getAttribute('data-idlocalidad')}`);
                $('#InputIdLocalidad').val(` El ID de la localidad es:  ${evt.target.getAttribute('data-idlocalidad')}`);

                buscarRutaDeLocalidad();
                $("#searchinput").val($(evt.target.querySelector('strong')).text().trim());
                $('#list-address-container').hide();
            });
        });
    }

    $("body").click(function (event) {
        if (event.target.id !== 'listaddresses' && event.target.id !== 'searchinput') {
            $('#list-address-container').hide();
        }
    });

    $("#searchinput").focus(function () {
        $('#list-address-container').show();
    });

    function showList(list) {
        $('.direcciones').remove();
        $.each(list, function (index, value) {

            $("#list-tab").append(`  <p class="list-group-item direcciones ${ !value.PermiteCalle ? 'disabled-list-item' : '' } list-group-item-action" id="listaddresses" data-toggle="list"
                data-idlocalidadpadre="${value.IdTipoLocalidad}"
                data-idlocalidad="${value.IdLocalidad}" href="#list-home" role="tab" aria-controls="home">
                <span class="glyphicon glyphicon-map-marker"></span>
                <strong id="placeName" > ${value.Nombre} </strong>
                ${value.PermiteCalle ? '<span class="badge badge-success">Admite calle</span>' : ''}
                <br>
                <span id="placeName" style='color: #AAA;' > ${value.TipoNombrePadre} - ${value.NombrePadre} </span>
                <span style="float: right;">${value.Descripcion}  </span> </p>`);
        });
    }

    // Buscar ruta de la localidad seleccionada
    async function buscarRutaDeLocalidad() {
        try {
            const res = await BuscarRutaDeLocalidad(LocalidadABuscar);
            console.log('La ruta es', JSON.parse(res));
            AddItem(JSON.parse(res), '@Model.TipoBusqueda');
            //setClickListener();
        } catch (err) {

        }
    }

    function BuscarRutaDeLocalidad(IdLocalidad) {

        let dataValue = { "IDLocalidad": IdLocalidad };

        return $.ajax({
            type: "get",
            url: "/Localidades/Buscar",
            data: dataValue,
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                console.log("Request: " + XMLHttpRequest.toString() + "\n\nStatus: " + textStatus + "\n\nError: " + errorThrown);
            },
            complete: function (jqXHR, status) {
            }
        });
    }

    function AddItem(list, typeOfList) {
        $('rutadelocalidad').text('');
        $('InputRutaLocalidad').text('');
        $('ReverseInputRutaLocalidad').text('');

        switch (typeOfList) {
            case 'inverso':
                for (var i = list.length - 1; i >= 0; i--) {
                    if (i === list.length - 1) {
                        $('#rutadelocalidad').text(list[i].Nombre);
                        $('#ReverseInputRutaLocalidad').val(list[i].Nombre); // InputRutaLocalidad // ReverseInputRutaLocalidad
                    }
                    else {
                        $('#rutadelocalidad').text(`${$('#rutadelocalidad').text()},  ${list[i].Nombre}`);
                        $('#ReverseInputRutaLocalidad').val(`${$('#ReverseInputRutaLocalidad').val()},  ${list[i].Nombre}`);
                    }
                }
                break;
            case 'normal':
                $.each(list, function (i, localidad) {
                    if (i === 0) {
                        $('#InputRutaLocalidad').val(localidad.Nombre);
                    }
                    else {
                        $('#InputRutaLocalidad').val(`${$('#InputRutaLocalidad').val()},  ${localidad.Nombre}`);
                    }
                });
                break;
            case 'TipoDeLocalidad':
                $.each(list, function (i, localidad) {
                    if (i === 0) {
                        $('#InputRutaLocalidad').val(localidad.Descripcion + ' ' + localidad.Nombre);
                    }
                    else {
                        $('#InputRutaLocalidad').val(`${$('#InputRutaLocalidad').val()}, ${localidad.Descripcion} ${localidad.Nombre}`);
                    }
                });
                break;
            default:
        }
    }
    </script>

}

