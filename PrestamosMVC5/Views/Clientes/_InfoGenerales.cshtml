@model ClienteModel

@Html.HiddenFor(model => model.Cliente.IdCliente)
@Html.HiddenFor(model => model.Cliente.IdNegocio)
@Html.HiddenFor(model => model.Cliente.Usuario)
@Html.HiddenFor(model => model.Cliente.Codigo)
@Html.HiddenFor(model => model.Cliente.Imagen1FileName)
@Html.HiddenFor(model => model.Cliente.Imagen2FileName)
@Html.HiddenFor(model => model.Cliente.Imagen1DocumentoName)
@Html.HiddenFor(model => model.Cliente.Imagen2DocumentoName)
<style>
    .hiddenfile {
        width: 0px;
        height: 0px;
        overflow: hidden;
    }
</style>
<!--//Todo poner imagen dinamica esta estatica-->
@{
    var image1Url = Url.Content(SiteImages.NoImage);
    var image2Url = Url.Content(SiteImages.NoImage);
    var imagen1DocumentoUrl = Url.Content(SiteImages.NoImage);
    var imagen2DocumentoUrl = Url.Content(SiteImages.NoImage);
    var imagen1Existe = false;
    var imagen2Existe = false;
    var imagen1DocumentoExiste = false;
    var imagen2DocumentoExiste = false;

    if (!string.IsNullOrEmpty(Model.Cliente.Imagen1DocumentoName))
    {
        imagen2DocumentoUrl = Url.Content(SiteDirectory.ImagesForClientes + "/" + Model.Cliente.Imagen1DocumentoName);
        imagen1DocumentoExiste = true;
    }
    if (!string.IsNullOrEmpty(Model.Cliente.Imagen2DocumentoName))
    {
        imagen1DocumentoUrl = Url.Content(SiteDirectory.ImagesForClientes + "/" + Model.Cliente.Imagen2DocumentoName);
        imagen2DocumentoExiste = true;
    }

    if (!string.IsNullOrEmpty(Model.Cliente.Imagen1FileName))
    {
        image1Url = Url.Content(SiteDirectory.ImagesForClientes + "/" + Model.Cliente.Imagen1FileName);
        imagen1Existe = true;
    }
    if (!string.IsNullOrEmpty(Model.Cliente.Imagen2FileName))
    {
        image2Url = Url.Content(SiteDirectory.ImagesForClientes + "/" + Model.Cliente.Imagen2FileName);
        imagen2Existe = true;
    }
}
<div class="clearfix"></div>
<div class="row">
    <!-- form input mask -->
    <div class="col-md-6 col-sm-12  ">
        <div class="x_panel">
            <h2>   Generales de la Persona</h2>
            <hr />
            <div class="x_content">
                <br />
                @*<form class="form-horizontal form-label-left">*@
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Cliente.Codigo, htmlAttributes: new
                        {
                   @class = @HtmlClass.LabelCls
                        })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Cliente.Codigo, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.Cliente.Codigo, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        Activo @Html.Label($"[{(Model.Cliente.Activo ? "Si" : "No")}]", new { @class = "control-label text-info" })
                    </div>
                </div>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Cliente.IdTipoIdentificacion, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.DropDownListFor(m => m.Cliente.IdTipoIdentificacion, SelectItems.TiposIdentificacion, htmlAttributes: new { @class = @HtmlClass.InputTextCls })
                        @Html.ValidationMessageFor(model => model.Cliente.IdTipoIdentificacion, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Cliente.NoIdentificacion, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Cliente.NoIdentificacion, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, data_inputmask = "'mask' : '999-9999999-9'", @onfocusout = "onChangeProp(this)" } })
                        @Html.ValidationMessageFor(model => model.Cliente.NoIdentificacion, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="row ">

                    <div class="col-md-6">
                        <img id="DocumentoPreview"
                             src="@imagen1DocumentoUrl" style="height:20em; width:60em;" class="img-fluid" />
                        @Html.HiddenFor(m => m.Documento1PreviewValue)
                        <input id="@Html.IdFor(m=> m.DocumentoCliente1)" class=@HtmlClass.InputTextCls type="file"
                               name="@Html.IdFor(m=> m.DocumentoCliente1)" accept="image/jpeg, image/png" capture="camera"
                               onchange="ShowImagePreview(this,'DocumentoPreview','@Html.IdFor(m=> m.DocumentoCliente1)', '@Html.IdFor(m => m.Documento1PreviewValue)')" style="display:none" />
                        <div class="text-center">
                            <label id="@Html.IdFor(m=> m.DocumentoCliente1)Agregar" for="@Html.NameFor(m=> m.DocumentoCliente1)" class="text-info"
                                   style="display:@Html.Raw(imagen1DocumentoExiste ? "none" : "block")">Agregar imagen</label>
                            <label id="@Html.IdFor(m=> m.DocumentoCliente1)Quitar" for="@Html.NameFor(m=> m.DocumentoCliente1)" class="text-danger"
                                   style="display:@Html.Raw(imagen1DocumentoExiste ? "block" : "none")" onclick="QuitarImagen('@Html.IdFor(m=> m.DocumentoCliente1)','DocumentoPreview','@Html.IdFor(m => m.Documento1PreviewValue)')">Quitar imagen</label>
                            @*<span id="container"></span>*@
                        </div>
                    </div>

                    <div class="col-md-6">
                        <img id="DocumentoPreview2"
                             src="@imagen2DocumentoUrl" style="height:20em; width:60em;" class="img-fluid" />
                        @Html.HiddenFor(m => m.Documento2PreviewValue)
                        <input id="@Html.IdFor(m=> m.DocumentoCliente2)" class=@HtmlClass.InputTextCls type="file"
                               name="@Html.IdFor(m=> m.DocumentoCliente2)" accept="image/jpeg, image/png" capture="camera"
                               onchange="ShowImagePreview(this,'DocumentoPreview','@Html.IdFor(m=> m.DocumentoCliente2)', '@Html.IdFor(m => m.Documento2PreviewValue)')" style="display:none" />
                        <div class="text-center">
                            <label id="@Html.IdFor(m=> m.DocumentoCliente2)Agregar" for="@Html.NameFor(m=> m.DocumentoCliente2)" class="text-info"
                                   style="display:@Html.Raw(imagen2DocumentoExiste ? "none" : "block")">Agregar imagen</label>
                            <label id="@Html.IdFor(m=> m.DocumentoCliente2)Quitar" for="@Html.NameFor(m=> m.DocumentoCliente2)" class="text-danger"
                                   style="display:@Html.Raw(imagen2DocumentoExiste ? "block" : "none")" onclick="QuitarImagen('@Html.IdFor(m=> m.DocumentoCliente2)','DocumentoPreview','@Html.IdFor(m => m.Documento2PreviewValue)')">Quitar imagen</label>
                            <span id="container"></span>
                        </div>
                    </div>
                </div>

                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Cliente.Nombres, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.Cliente.Nombres, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                            @Html.ValidationMessageFor(model => model.Cliente.Nombres, "", new { @class = "text-danger" })
                            <span class="@HtmlClass.SpanfauserCls" aria-hidden="true"></</span>

                        </div>
                    </div>
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Cliente.Apellidos, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.Cliente.Apellidos, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                            @Html.ValidationMessageFor(model => model.Cliente.Apellidos, "", new { @class = "text-danger" })
                            <span class="@HtmlClass.SpanfauserCls" aria-hidden="true"></</span>

                        </div>
                    </div>
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Cliente.Apodo, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.Cliente.Apodo, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                            @Html.ValidationMessageFor(model => model.Cliente.Apodo, "", new { @class = "text-danger" })
                            <span class="@HtmlClass.SpanfauserCls" aria-hidden="true"></</span>
                        </div>
                    </div>
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Cliente.EstadoCivil, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.DropDownListFor(model => model.Cliente.EstadoCivil, SelectItems.EstadosCiviles, htmlAttributes: new { @class = @HtmlClass.InputTextCls })
                            @Html.ValidationMessageFor(model => model.Cliente.EstadoCivil, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Cliente.TieneConyuge, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.Cliente.TieneConyuge, new
                       { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                            @Html.ValidationMessageFor(model => model.Cliente.TieneConyuge, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Cliente.Sexo, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.DropDownListFor(model => model.Cliente.Sexo, SelectItems.Sexos, htmlAttributes: new { @class = @HtmlClass.InputTextCls })
                        </div>
                    </div>

                    @*</form>*@
                </div>
        </div>
    </div>
    <div class="col-md-6 col-sm-12  ">
        <div class="x_panel">
            <div class="x_content">
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Cliente.FechaNacimiento, htmlAttributes: new { @class = @HtmlClass.LabelCls, @type = "date" })
                    <div class="@HtmlClass.DivInputCls">
                        @*@{
                                string formatted = String.Format("{0:yyyy-MM-dd}", Model.Cliente.FechaNacimiento);
                            }*@
                        @*<input type="date" id="@Html.IdFor(m => m.Cliente.FechaNacimiento)" name="@Html.NameFor(m => m.Cliente.FechaNacimiento)" value=@formatted>*@
                        @Html.EditorFor(model => model.Cliente.FechaNacimiento, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                        @*@Html.ValidationMessageFor(model => model.Cliente.FechaNacimiento, "", new { @class = "text-danger" })*@
                    </div>
                </div>

                <div class="@HtmlClass.FormGroupCls">
                    @Html.Label("Foto", htmlAttributes: new { @class = @HtmlClass.LabelCls })
                </div>
                <div class="row ">


                    @* TODO: ver estilos y colocar campo parecido arriba *@
                    <div class="col-md-6">
                        <img id="image1Preview"
                             src="@image1Url" style="height:20em; width:60em;" class="img-fluid" />
                        @Html.HiddenFor(m => m.image1PreviewValue)
                        <input id="@Html.IdFor(m=> m.ImagenCliente1)" class=@HtmlClass.InputTextCls type="file"
                               name="@Html.IdFor(m=> m.ImagenCliente1)" accept="image/jpeg, image/png" capture="camera"
                               onchange="ShowImagePreview(this,'image1Preview','@Html.IdFor(m=> m.ImagenCliente1)', '@Html.IdFor(m => m.image1PreviewValue)')" style="display:none" />
                        <div class="text-center">
                            <label id="@Html.IdFor(m=> m.ImagenCliente1)Agregar" for="@Html.NameFor(m=> m.ImagenCliente1)" class="text-info"
                                   style="display:@Html.Raw(imagen1Existe ? "none" : "block")">Agregar imagen</label>
                            <label id="@Html.IdFor(m=> m.ImagenCliente1)Quitar" for="@Html.NameFor(m=> m.ImagenCliente1)" class="text-danger"
                                   style="display:@Html.Raw(imagen1Existe ? "block" : "none")" onclick="QuitarImagen('@Html.IdFor(m=> m.ImagenCliente1)','image1Preview','@Html.IdFor(m => m.image1PreviewValue)')">Quitar imagen</label>
                            @*<span id="container"></span>*@
                        </div>
                    </div>

                    <div class="col-md-6">
                        <img id="image2Preview"
                             src="@image2Url" style="height:20em; width:60em;" class="img-fluid" />
                        @Html.HiddenFor(m => m.image2PreviewValue)
                        <input id="@Html.IdFor(m=> m.ImagenCliente2)" class=@HtmlClass.InputTextCls type="file"
                               name="@Html.IdFor(m=> m.ImagenCliente2)" accept="image/jpeg, image/png" capture="camera"
                               onchange="ShowImagePreview(this,'image2Preview','@Html.IdFor(m=> m.ImagenCliente2)', '@Html.IdFor(m => m.image2PreviewValue)')" style="display:none" />
                        <div class="text-center">
                            <label id="@Html.IdFor(m=> m.ImagenCliente2)Agregar" for="@Html.NameFor(m=> m.ImagenCliente2)" class="text-info"
                                   style="display:@Html.Raw(imagen2Existe ? "none" : "block")">Agregar imagen</label>
                            <label id="@Html.IdFor(m=> m.ImagenCliente2)Quitar" for="@Html.NameFor(m=> m.ImagenCliente2)" class="text-danger"
                                   style="display:@Html.Raw(imagen2Existe ? "block" : "none")" onclick="QuitarImagen('@Html.IdFor(m=> m.ImagenCliente2)','image2Preview','@Html.IdFor(m => m.image2PreviewValue)')">Quitar imagen</label>
                            @*<span id="container"></span>*@
                        </div>
                    </div>


                </div>
                <script>

                    @*function QuitarImagen(elemId, imageElemIdText, hiddeInputImgElemText) {
                        console.log(elemId, imageElemIdText);
                        $("#"+imageElemIdText).attr("src", "@Url.Content(SiteImages.NoImage)");
                        $("#" + elemId + "Agregar").toggle();
                        $("#" + elemId + "Quitar").toggle();
                        $("#" + hiddeInputImgElemText).val('@Constant.NoImagen');
                        event.preventDefault();
                    }*@
                </script>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Cliente.TelefonoMovil, htmlAttributes: new
                    {
                        @class = @HtmlClass.LabelCls
                        })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Cliente.TelefonoMovil, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @data_tel = "true" } })
                        <span class="@HtmlClass.SpanfaphoneCls" aria-hidden="true"></</span>
                        @Html.ValidationMessageFor(model => model.Cliente.TelefonoMovil, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Cliente.TelefonoCasa, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Cliente.TelefonoCasa, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @data_tel = "true" } })
                        <span class="@HtmlClass.SpanfaphoneCls" aria-hidden="true"></</span>
                        @Html.ValidationMessageFor(model => model.Cliente.TelefonoCasa, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => Model.Cliente.IdTipoProfesionUOcupacion, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.DropDownListFor(m => m.Cliente.IdTipoProfesionUOcupacion, SelectItems.Ocupaciones, htmlAttributes: new { @class = @HtmlClass.InputTextCls })
                        @Html.ValidationMessageFor(model => Model.Cliente.IdTipoProfesionUOcupacion, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
