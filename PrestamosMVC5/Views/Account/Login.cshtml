@model PrestamosMVC5.Models.LoginModel
@using CaptchaMvc.HtmlHelpers;
@{
    //Layout = "~/Views/Shared/_LayoutForms.cshtml";
}
@section PageStyle    {
    <link href="~/Content/customcss/switch.css" rel="stylesheet">
}


<div class="row">
    <div class="form-horizontal col-md-6 offset-md-3 mt-5">

        @using (@Html.BeginForm("Login", "Account", FormMethod.Post, htmlAttributes: new { id = "loginForm", autocomplete = "off" }))
        {
            <div class="@HtmlClass.FormGroupCls">
                <div class="@HtmlClass.DivInputCls">
                    <img src="@Url.Content(SiteImages.AppLogoSinLetra )" alt="Logo de la aplicacion" height="100em" width="100em" class="center">
                </div>
            </div>
            @Html.HiddenFor(model => model.ReturnUrl)
            @Html.HiddenFor(model => model.ValidateCaptcha)
            @Html.AntiForgeryToken()
            <div class="@HtmlClass.FormGroupCls">
                <div class="text-center @HtmlClass.DivInputCls" role="alert" id="mensajeError">
                    @Html.ValidationSummary(true, "", new { @id = "validationSummary", data_showerrorstime = @Html.Raw(ViewBag.ShowSummaryErrorsTime) })
                </div>
            </div>
            // attention :  para mostrar contenido dentro de un objeto anbonimo debemos usar html.raw y luego enviar el valor dentro de un objeto anonimo asi new { @id = "validationSummary", data_showerrorstime =@Html.Raw(ViewBag.ShowSummaryErrorsTime)  })
            @*<div class="@HtmlClass.FormGroupCls">
                <input type="hidden" name="topvalidations" id="topvalidations" />
                <div class="@HtmlClass.DivInputCls text-center">
                    @Html.ValidationMessage("topvalidations", null, new { @class = "text-danger", @id = "mensajeError" })
                </div>
            </div>*@
            <div class="@HtmlClass.FormGroupCls">
                <div class="text-center @HtmlClass.DivInputCls">
                    @Html.LabelFor(model => model.IdNegocio)
                    @*htmlAttributes: new { @class = string.Concat(@HtmlClass.LabelCls, " text-center") })*@
                </div>
            </div>

            if (Model.SoloHayUnNegocioMatriz)
            {
                var negociosOperacionesForMatriz = @SelectItems.NegociosOperacionalesForMatriz(Model.NegocioMatrizCuandoSoloHayUno.IdNegocio);
                <div class="@HtmlClass.FormGroupCls">
                    <div class="@HtmlClass.DivInputCls">

                        @Html.DropDownListFor(m => m.IdNegocio, negociosOperacionesForMatriz, htmlAttributes: new { @class = @HtmlClass.InputTextCls })
                        @Html.ValidationMessageFor(model => model.IdNegocio, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                <div class="@HtmlClass.FormGroupCls">
                    <div class="@HtmlClass.DivInputCls">
                        @Html.DropDownListFor(m => m.IdNegocio, SelectItems.NegociosMatrizRaiz(), htmlAttributes: new { @class = @HtmlClass.InputTextCls })
                        @Html.ValidationMessageFor(model => model.IdNegocio, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            <div class="@HtmlClass.FormGroupCls">
                @*@Html.LabelFor(model => model.LoginName, htmlAttributes: new { @class = @HtmlClass.LabelCls })*@
                <div class="@HtmlClass.DivInputCls ">
                    @*<label for="LoginName">@Html.NameOrDescriptionFor(m => m.LoginName, PropToGet.Name)</label>*@
                    @Html.EditorFor(model => model.LoginName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.NameOrDescriptionFor(model => model.LoginName, PropToGet.Name) } })
                    @Html.ValidationMessageFor(model => model.LoginName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="@HtmlClass.FormGroupCls">
                <div class="@HtmlClass.DivInputCls">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", value = Model.Password, placeholder = @Html.NameOrDescriptionFor(model => model.Password, PropToGet.Name) } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>

            if (Model.ValidateCaptcha)

            {
                @*<div id="captchaSection" class="form-label-group text-center">*@
                <div class="@HtmlClass.FormGroupCls" id="id=" captchaSection">
                    <div class="text-center @HtmlClass.DivInputCls">
                        @{
                            var captcha = Html.Captcha("Generar otro", "escriba las letras mostradas", 5, "campo requerido", true);
                            @captcha;
                            @Html.ValidationMessage(captcha.BuildInfo.InputElementId, new { @class = "text-danger" });
                        }
                    </div>
                </div>
            }
            else
            {

                <div class="@HtmlClass.FormGroupCls">
                    <div class="row justify-content-center align-items-center @HtmlClass.DivInputCls">
                        @Html.Label("Captcha Section Ignored in non production modes")
                    </div>
                </div>
            }

            <div class="@HtmlClass.FormGroupCls">
                <div class="@HtmlClass.DivInputCls">
                    <input type="submit" value="Entrar" class="btn btn-lg btn-primary btn-block text-uppercase submit" />
                </div>
            </div>
        }
    </div>
</div>

@section scripts {
    <script src="~/Scripts/Apps/manageErrorMessageOnForms.js"></script>
    @*<span id="CaptchaInputText-error" class="">This field is required.</span>*@
    <script>
        let formulario = $("#loginForm");
        let elem = $("[data-valmsg-for='CaptchaInputText']:first");
        elem.remove();
        $("#NombreCompaniaSeleccionada").val($( "#myselect option:selected" ).text());
    </script>
}
