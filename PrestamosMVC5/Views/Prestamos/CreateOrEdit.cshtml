@model  PrestamoVm

@section pageStyle
{
    <style>
        .tableCuotas {
            border-spacing: 10px;
            border-collapse: separate;
        }
    </style>
}
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmEdtPrestamo" }))

{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="">
            <div class="row d-flex justify-content-between">
                @*<div class="x_title">*@
                <div @*class="col-md-4 col-sm-12 "*@>
                    <h2>Edicion de Prestamos</h2>
                </div>
                <div @*class="col-md-2 col-sm-12 "*@>
                    <button id="probando" class="btn btn-primary"> </button>
                </div>

                <div @*class="col-md-6 col-sm-12"*@>
                    <button type="button" class="btn btn-primary" onclick="postForm()" title="Guardar"> Guardar</button>
                </div>
            </div>

            @*<div class="x_panel">
                    <div class="col-md-6 col-sm-12 text-center" id="mensajeError" role="alert">
                        @Html.ValidationSummary(true, "", new { @id = "validationSummary" })
                    </div>
                </div>*@
            <div class="row">
                <!-- form input mask -->
                <div class="col-md-6 col-sm-12">
                    <div class="x_panel">
                        <div class="x_content">
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Prestamo.PrestamoNumero, htmlAttributes: new { @class = @HtmlClass.LabelCls, @type = "date" })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Prestamo.PrestamoNumero, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @disabled = "true", @Value = (Model.Prestamo.IdPrestamo <= 0 ? "Nuevo" : Model.Prestamo.PrestamoNumero) } })
                                    @Html.ValidationMessageFor(model => model.Prestamo.PrestamoNumero, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Prestamo.FechaEmisionReal, htmlAttributes: new { @class = @HtmlClass.LabelCls, @type = "date" })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Prestamo.FechaEmisionReal, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @Value = Model.Prestamo.FechaEmisionReal.ToShortDateString() } })
                                    @*string("dd/MM/yyyy",System.Globalization.CultureInfo.InvariantCulture*@
                                    @Html.ValidationMessageFor(model => model.Prestamo.FechaEmisionReal, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.IncluirRenovacion, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.IncluirRenovacion, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                    @Html.ValidationMessageFor(model => model.IncluirRenovacion, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            @* Prestamos a renovar *@
                            <div id="seccionRenovacion">
                                <div class="@HtmlClass.FormGroupCls">
                                    <label class="control-label col-md-4 col-sm-3 col-xs-3 font-italic">**Busqueda Prestamo a renovar**</label>
                                    <div class="@HtmlClass.DivInputCls">
                                        <div style="margin: auto; padding: 0%;">
                                            <input class="prestamo_target form-control text-search remove-error" type="text" id="input-prestamo_search" autocomplete="off" placeholder="indique criterio de busqueda" name="input-prestamo_search" value=" " aria-describedby="input-prestamo_search-error" aria-invalid="false" />
                                            <span class="fa fa-search form-control-feedback right" aria-hidden="true"></span>
                                            <span class="field-validation-valid text-danger" data-valmsg-for="input-prestamo_search" data-valmsg-replace="true"></span>

                                            <div style="float:right">
                                                <span>buscar por </span>
                                                <input type="radio" class="flat searchtype" checked id="search-by-prestamo" value="1" style="float:right;" />
                                                <i class="fa fa-dollar"></i> Prestamo
                                                <input type="radio" class="flat searchtype" id="search-by-user" value="2" style="float:right;" />
                                                <i class="fa fa-user"></i> Cliente
                                                <input type="radio" class="flat searchtype" id="search-by-garantia" value="3" style="float:right;" />
                                                <i class="fa fa-automobile"></i> Garantia
                                            </div>

                                            <div id="list-prestamo-container">
                                                <div class="list-group col-md-12" id="list-prestamo-tab" role="tablist" style="position: absolute; z-index:2; padding: 0%; vertical-align: middle;">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="@HtmlClass.FormGroupCls">
                                    <label class="control-label col-md-4 col-sm-3 col-xs-3">Prestamo seleccionado a renovar</label>
                                    <div class="@HtmlClass.DivInputCls">
                                        <textarea class="@HtmlClass.DivInputCls" id="info-prestamo-a-renovar" name="comment" form="frmEdtPrestamo" disabled>Informacion del prestamo a renovar</textarea>
                                    </div>
                                </div>
                                <div class="@HtmlClass.FormGroupCls">
                                    @Html.LabelFor(model => model.Prestamo.DeudaRenovacion, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                    <div class="@HtmlClass.DivInputCls">
                                        @Html.EditorFor(model => model.Prestamo.DeudaRenovacion, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @disabled = true } })
                                        @Html.ValidationMessageFor(model => model.Prestamo.DeudaRenovacion, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Prestamo.IdClasificacion, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.DropDownListFor(model => model.Prestamo.IdClasificacion, SelectItems.Clasificaciones(Model.Prestamo.IdNegocio), htmlAttributes: new { @class = @HtmlClass.InputTextCls, @onchange = "onChangeProp(this)", data_input = "true" })

                                    @Html.ValidationMessageFor(model => model.Prestamo.IdClasificacion, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Prestamo.IdTipoAmortizacion, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.DropDownListFor(model => model.Prestamo.IdTipoAmortizacion, SelectItems.TiposAmortizacion, htmlAttributes: new { @class = @HtmlClass.InputTextCls, data_input = "true" })
                                    @Html.ValidationMessageFor(model => model.Prestamo.IdClasificacion, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            @* Fin prestamo a renovar *@






                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Prestamo.IdTasaInteres, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.DropDownListFor(model => model.Prestamo.IdTasaInteres, SelectItems.TasasInteresMuestraCodigoYtasa(Model.Prestamo.IdNegocio), htmlAttributes: new { @class = @HtmlClass.InputTextCls, onchange = "onChangeProp(this)", data_input = "true" })
                                    @*@Html.EditorFor(model => model.Prestamo.IdTasaInteres, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })*@
                                    @Html.ValidationMessageFor(model => model.Prestamo.IdTasaInteres, "", new { @class = "text-danger" })
                                </div>
                            </div>



                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Prestamo.IdPeriodo, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.DropDownListFor(model => model.Prestamo.IdPeriodo, SelectItems.Periodos(Model.Prestamo.IdNegocio), htmlAttributes: new { @class = @HtmlClass.InputTextCls, onchange = "onChangeProp(this)" })
                                    @*@Html.EditorFor(model => model.Prestamo.IdPeriodo, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })*@
                                    @Html.ValidationMessageFor(model => model.Prestamo.IdPeriodo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Prestamo.TasaDeInteresPorPeriodo, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    <input class="form-control text-box single-line" id="Prestamo_TasaDeInteresPorPeriodo" name="Prestamo.TasaDeInteresPorPeriodo" disabled type="text" value="@Model.Prestamo.TasaDeInteresPorPeriodo">
                                    @*@Html.EditorFor(model => model.Prestamo.TasaDeInteresPorPeriodo, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @readonly = true } })*@
                                    @*@Html.ValidationMessageFor(model => model.Prestamo.TasaDeInteresPorPeriodo, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Prestamo.CantidadDePeriodos, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Prestamo.CantidadDePeriodos, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @min = 1, @pattern = "[0-9]{10}", onchange = "onChangeProp(this)" } })
                                    @*@min = 1, @pattern = "[0-9]{10}" } })*@
                                    @Html.ValidationMessageFor(model => model.Prestamo.CantidadDePeriodos, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Prestamo.IdTipoMora, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.DropDownListFor(model => model.Prestamo.IdTipoMora, SelectItems.TiposMora(Model.Prestamo.IdNegocio), htmlAttributes: new { @class = @HtmlClass.InputTextCls })
                                    @Html.ValidationMessageFor(model => model.Prestamo.IdTipoMora, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            @*<div class="@HtmlClass.FormGroupCls">
                                    @Html.LabelFor(model => model.Prestamo.MontoPrestado, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                    <div class="@HtmlClass.DivInputCls">
                                        @Html.EditorFor(model => model.Prestamo.MontoPrestado, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, data_type = "currency" } })
                                        @Html.ValidationMessageFor(model => model.Prestamo.MontoPrestado, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@

                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Prestamo.MontoPrestado, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.MontoAPrestar, new { htmlattributes = new { @class = HtmlClass.InputTextCls + " remove-error", onchange = "onChangeProp(this)", data_type = "currency", pattern = @"^\$\d{1,3}(,\d{3})*(\.\d+)?$", placeholder = "$0.00", value = "0.00" } })
                                    @Html.ValidationMessageFor(model => model.MontoAPrestar, "", new { @class = "text-danger" })
                                    @*<input type="text" name="_MontoAPrestar" id="_MontoAPrestar" class="input-amount-1" pattern="^\$\d{1,3}(,\d{3})*(\.\d+)?$" value="" data-type="currency" placeholder="$0.00">*@
                                </div>
                            </div>

                        </div>
                    </div>
                </div>

                <!-- form input mask -->
                <div class="col-md-6 col-sm-12">
                    <div class="x_panel">
                        <div class="x_content">
                            <div class="@HtmlClass.FormGroupCls">
                                <label class="control-label col-md-3 col-sm-3 col-xs-3 font-italic">**Cliente** </label>

                                <div class="@HtmlClass.DivInputCls">

                                    <div style="margin: auto; padding: 0%;">
                                        <input class="cliente_target form-control text-search remove-error" type="text" autocomplete="dummy-no-auto-complete-fix" id="search-cliente-input" placeholder="Buscar cliente (nombre, cedula)..." name="search-cliente-input" value="" aria-describedby="search-cliente-input-error" aria-invalid="false" />
                                        <span class="fa fa-search form-control-feedback right" aria-hidden="true"></span>
                                        <span class="field-validation-valid text-danger" data-valmsg-for="search-cliente-input" data-valmsg-replace="true"></span>

                                        <div id="list-cliente-container">
                                            <div class="list-group col-md-12" id="list-clientes-tab" role="tablist" style="position: absolute; z-index:2; padding: 0%; vertical-align: middle;">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="@HtmlClass.FormGroupCls">
                                <label class="control-label col-md-3 col-sm-3 col-xs-3">Cliente seleccionado</label>
                                <div class="@HtmlClass.DivInputCls" id="info-cliente">
                                    @*<textarea class="form-control" id="info-cliente" name="comment" form="frmEdtPrestamo" disabled>Informacion del cliente</textarea>*@
                                </div>
                            </div>
                            <div class="text-center  mensajes-secciones" id="mensaje-seccionGarantia"></div>

                            <div id="seccionGarantia">
                                <div class="@HtmlClass.FormGroupCls">
                                    <label class="control-label col-md-3 col-sm-3 col-xs-3 font-italic">**Garantia**</label>
                                    <div class="@HtmlClass.DivInputCls">
                                        <div style="margin: auto; padding: 0%;">
                                            <input class="garantia_target form-control text-search remove-error" type="text" autocomplete="dummy-no-auto-complete-fix" id="search-garantia-input" placeholder="Buscar garantia..." name="search-garantia-input" value="" aria-describedby="search-garantia-input-error" aria-invalid="false" />
                                            <span class="fa fa-search form-control-feedback right" aria-hidden="true"></span>
                                            <span class="field-validation-valid text-danger" data-valmsg-for="search-garantia-input" data-valmsg-replace="true"></span>
                                            <div id="list-garantia-container">
                                                <div class="list-group col-md-12" id="list-garantia-tab" role="tablist" style="position: absolute; z-index:2; padding: 0%; vertical-align: middle;">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="animated flipInY col-lg-3 col-md-3 col-sm-6  ">
                                        Garantias Seleccionadas
                                        <div class="tile-stats">
                                            <div id="cantidadDeGarantias" class="count">0</div>
                                        </div>
                                    </div>
                                    <div class="@HtmlClass.DivInputCls" id="info-garantia">
                                    </div>
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.LlevaGastoDeCierre, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.LlevaGastoDeCierre, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                    @Html.ValidationMessageFor(model => model.LlevaGastoDeCierre, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div id="seccionGastoDeCierre">
                                <div class="@HtmlClass.FormGroupCls col-md-12 col-sm-12 col-xs-12">

                                    <div class="col-md-6 col-sm-12 col-xs-12">
                                        @Html.LabelFor(model => model.Prestamo.InteresGastoDeCierre, htmlAttributes: new { @class = "col-md-8 col-sm-12 col-xs-12" })
                                        @Html.EditorFor(model => model.Prestamo.InteresGastoDeCierre, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls + " col-md-4 ", onchange = "onChangeProp(this)", type = "number", min = 0, max = 100 } })
                                        @Html.ValidationMessageFor(model => model.Prestamo.InteresGastoDeCierre, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-xs-12 text-lg-left font-weight-bolder ">
                                        <h2 class="col-md-12"> = $<span id="MontoDelGastoDeCierre">0.00</span></h2>
                                    </div>
                                </div>
                                <div>
                                    <div class="@HtmlClass.FormGroupCls col-md-12 col-sm-12 col-xs-12">
                                        <div class="col-md-6 col-sm-12 col-xs-12">
                                            @Html.LabelFor(model => model.Prestamo.GastoDeCierreEsDeducible, htmlAttributes: new { @class = "control-label col-md-8 col-sm-12 col-xs-12" })
                                            @Html.EditorFor(model => model.Prestamo.GastoDeCierreEsDeducible, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                            @Html.ValidationMessageFor(model => model.Prestamo.GastoDeCierreEsDeducible, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-6 col-sm-12 col-xs-12">
                                            @Html.LabelFor(model => model.Prestamo.CargarInteresAlGastoDeCierre, htmlAttributes: new { @class = "control-label col-md-8 col-sm-12 col-xs-12" })
                                            @Html.EditorFor(model => model.Prestamo.CargarInteresAlGastoDeCierre, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                            @Html.ValidationMessageFor(model => model.Prestamo.CargarInteresAlGastoDeCierre, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>


                                <div class="@HtmlClass.FormGroupCls col-md-12 col-sm-12 col-xs-12">
                                    <div class="col-md-6 col-sm-12 col-xs-12">
                                        @Html.LabelFor(model => model.Prestamo.FinanciarGastoDeCierre, htmlAttributes: new { @class = "control-label col-md-8 col-sm-12 col-xs-12" })
                                        @Html.EditorFor(model => model.Prestamo.FinanciarGastoDeCierre, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                        @Html.ValidationMessageFor(model => model.Prestamo.FinanciarGastoDeCierre, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            @*<div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Prestamo.IdDivisa, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @readonly = true } })
                                    <div class="@HtmlClass.DivInputCls">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.Prestamo.SumarGastoDeCierreALasCuotas, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                            @Html.ValidationMessageFor(model => model.Prestamo.SumarGastoDeCierreALasCuotas, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>*@
                        </div>
                    </div>

                    <div class="x_panel bg-blue-sky">
                        <div class="x_content">

                            <div class="row d-flex justify-content-between">
                                <p> <strong style="color:black">**Proyeccion De Cuotas** </strong></p>
                                <button type="button" id="cuota-hotkey"></button>
                            </div>
                            <div class="row">
                                <label> informacion del prestamo: <span id="totalPrestado"></span> <span id="cuotaExplicacion"></span></label>
                            </div id="outerDiv">
                                <div id="scroll-div" class="scrollableContent" style="height:10em">
                                    <table id="lista-cuotas" class="table table-bordered" style="height:10em" > </table>
                                </div>
                            </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <section name="hiddenProps">
        @Html.HiddenFor(model => model.Prestamo.IdPrestamo)
        @Html.HiddenFor(model => model.Prestamo.IdPrestamoARenovar)
        @Html.HiddenFor(model => model.Prestamo.IdCliente)
        @Html.HiddenFor(model => model.Prestamo.IdLocalidad)
        @Html.HiddenFor(model => model.Prestamo.IdNegocio)
        @Html.HiddenFor(model => model.Prestamo.MontoPrestado)
        @Html.HiddenFor(model => model.Prestamo.AcomodarFechaALasCuotas)
        <label id="TasaDeInteresPorPeriodoNumber" style="display:none"></label>
        @*<input type="hidden" id="totalPrestado" />*@
        <span id="forIdGarantias"></span>
        <span id="forIdCodeudores"></span>
    </section>
}

@section scripts {
    <script src="~/Scripts/Apps/utils.js"></script>
    <script>

        let dateFormat = 'es-DO';
        let _dateFormat = 'dd/mm/yy';
        let yearRangeForDP = "-120:+0";
        //function setFecha(jQelem, name) {
        //    const fecha = toDate(jQelem.val());
        //    var formattedDate = moment(fecha).format("DD/MM/YYYY")
        //    jQelem.val(formattedDate);
        //}
        //const toDate = (dateStr) => {
        //    const [day, month, year] = dateStr.split("/")
        //    return new Date(year, month - 1, day)
        //}
    </script>
    <script src="~/Scripts/apps/datePickerInit.js"></script>
    <script src="~/Scripts/Apps/setMask.js"></script>
    <script src="~/Scripts/Apps/manageErrorMessageOnForms.js"></script>
    <script src="~/Scripts/Apps/CheckInput.js"></script>
    <script src="~/Scripts/Apps/Numbers/manageCurrency01.js"></script>
    <script src="~/Content/vendors/jquery.hotkeys/jquery.hotkeys.js"></script>
    @*<script src="~/Scripts/Apps/minMaxAdapter.js"></script>*@
    @*<script src="~/Scripts/Apps/cultureInfo.js"></script>*@
    <script>
        $(document).ready(function () {
            $('#table-cuotas').DataTable({
                "scrollX": true
            });
            $('.dataTables_length').addClass('bs-select');
        });

        $("#probando").hide();
        //    .text("Ctrl-c: Calcular Cuotas").css('color', 'yellow')
        //    on("click", () => calcularTasaInteresPorPeriodo());
        //.on("click", () => calcularCuotas());
        $("#cuota-hotkey").text("-Ctrl-c: Calcular Cuotas").css('color', 'yellow').css('background','black')
        .on("click", () => calcularCuotas());
        $('.form-control').bind('keydown', 'ctrl+c', function () { calcularCuotas() })
        //$('input').bind('keydown', 'ctrl+c', function () { calcularCuotas() })
        //$('select').bind('keydown', 'ctrl+c', function () { calcularCuotas() })


    let idGarantias = []
    let idClasifLLevanGarantias = [];
    let tasasDeInteres = [];
    let deudaRenovacion = 0;
    let montoGastoDeCierre = 0;
    let GCEsDeducible = false;
    let montoEmitidoAlCliente = 0;
    let totalCapital = 0;

    let counter = 0;
    attachOnChangeEventToCheckBoxes();
    onEnterAvoidSubmitForm();
    InitData();
    function InitData() {
        $("#datosDeCliente").html("@Model.infoCliente")
        $("#datosDeGarantia").html("@Model.infoGarantia")
        hideShowSeccionGastoDeCierre(@Model.LlevaGastoDeCierre.ToString().ToLower());
        hideShowSeccionRenovacion(@Model.IncluirRenovacion.ToString().ToLower())
        getClasificacionesQueLlevanGarantia();
        getTasasDeInteres();
        calcularTotalPrestado();
    }


    function onEnterAvoidSubmitForm() {
        $('form input').keydown(function (e) {
            if (e.keyCode == 13) {
                e.preventDefault();
                return false;
            }
        });
    }

        function getClasificacionesQueLlevanGarantia() {

        return $.ajax({
            type: "get",
            url: "/Prestamos/ClasificacionesQueLlevanGarantia",
            dataType: "json",
            //contentType: 'text/html; charset=utf-8',
            contentType: 'application/json; charset=utf-8',
            tradition: true,
            success: function (response) {
                idClasifLLevanGarantias = response;
                //console.log(response);
                return response;
            }
        });
    }

    function getTasasDeInteres() {
        $.ajax({
            type: "get",
            url: "/TasaInteres/GetAllTasasDeInteres",
            dataType: "json",
            //contentType: 'text/html; charset=utf-8',
            contentType: 'application/json; charset=utf-8',
            tradition: true,
            success: function (data) {
                tasasDeInteres = data;
                //console.log(tasasDeInteres);
                //const result = response.find(function (item, i) { console.log(item);});
                //{ if (item.idTasaDeInteres === 5) return item.InteresMensual })
            },
            complete: function () {calcularTasaInteresPorPeriodo();}
        });

    }

    function onChangeProp(elem) {
        switch (elem.id) {
            case "@Html.IdFor(model => model.LlevaGastoDeCierre)":
                const llevaGC = elem.checked;
                hideShowSeccionGastoDeCierre(llevaGC)
                break;
            case "@Html.IdFor(model => model.IncluirRenovacion)":
                const esUnaRenovacion = elem.checked;
                hideShowSeccionRenovacion(esUnaRenovacion)
                break;
            case "@Html.IdFor(model => model.Prestamo.IdClasificacion)":
                hideShowSeccionGarantia();
                break;
            case "@Html.IdFor(model => model.Prestamo.IdPeriodo)":
                calcularTasaInteresPorPeriodo();
                break;
            case "@Html.IdFor(model => model.Prestamo.CantidadDePeriodos)":
                calcularCuotas();
                break;
            case "@Html.IdFor(model => model.Prestamo.IdTasaInteres)":
                calcularTasaInteresPorPeriodo();
                calcularCuotas();
                break;
            case "@Html.IdFor(model => model.MontoAPrestar)":
                calcularTotalPrestado();
                calcularCuotas();
                break;
            case "@Html.IdFor(model => model.Prestamo.InteresGastoDeCierre)":
                calcularMontoGastoDeCierre();
                break;
        }
    }

    function hideShowSeccionGastoDeCierre(mostrar) {
        if (mostrar) { $("#seccionGastoDeCierre").show(); }
        else { $("#seccionGastoDeCierre").hide(); }

    }
    function calcularTotalCapital() {
        let value = $("#@Html.IdFor(model => model.MontoAPrestar)").val()
        if (value.indexOf(".") < 0) { value += ".00"; }
        montoEmitidoAlCliente = toFloat(value);
        //console.log(typeof (value), value, toFloat(value));
        $("#@Html.IdFor(model => model.Prestamo.MontoPrestado)").val(montoEmitidoAlCliente);
        deudaRenovacion = parseFloat($("#@Html.IdFor(m => m.Prestamo.DeudaRenovacion)").val());
        totalCapital = montoEmitidoAlCliente + deudaRenovacion;
        //console.log(montoAPrestar, deudaRenovacion, totalPrestado);
        console.log(counter++);
        return totalCapital;
    }

    function calcularTotalPrestado() {
        calcularTotalCapital();
        calcularMontoGastoDeCierre();
        const textoExplicacionPrestamo = explicacionPrestamo();
        $("#totalPrestado").val(totalPrestado).text(textoExplicacionPrestamo);

    }

    function calcularMontoGastoDeCierre() {
        GCEsDeducible = $("#@Html.IdFor(m => m.Prestamo.GastoDeCierreEsDeducible)").val() == 'true' ;
        const intGC = parseFloat($("#@Html.IdFor(model => model.Prestamo.InteresGastoDeCierre)").val());
        montoGastoDeCierre = totalCapital * (intGC / 100);
        $("#MontoDelGastoDeCierre").text(montoGastoDeCierre.toFixed(2));
        if (!GCEsDeducible) {
            totalPrestado = totalCapital + montoGastoDeCierre;
        }
        else {
            totalPrestado = totalCapital;
        }
        return montoGastoDeCierre;
    }

    function explicacionPrestamo() {
        let mensaje = '';
        //console.log(` montoEmitidoAlCliente ${typeof (montoEmitidoAlCliente)} valor ${montoEmitidoAlCliente}`);
        //console.log(` deudaRenovacion ${typeof (deudaRenovacion)} valor ${deudaRenovacion}`);
        //console.log(` montoGastoDeCierre ${typeof (montoGastoDeCierre)} valor ${montoGastoDeCierre }`);
        if (montoEmitidoAlCliente > 0) {
            mensaje += ` el dinero a entregar al cliente es por la suma de ${montoEmitidoAlCliente}`
        }
        if (deudaRenovacion > 0) {
            mensaje += ` + la deuda de la renovacion es de ${deudaRenovacion}`
        }

        if (montoGastoDeCierre > 0) {
            if (GCEsDeducible)
                mensaje += ` + el total del gasto de cierre es de ${montoGastoDeCierre} pero como es deducible no aumenta el valor total del prestamo`
            else
                mensaje += ` + el total del gasto de cierre es de ${montoGastoDeCierre} lo que hace que el valor todal del prestamo sea ${totalPrestado}`
        }
        console.log();
        return mensaje;
    }

    function hideShowSeccionRenovacion(mostrar) {
        if (mostrar) { $("#seccionRenovacion").show(); }
        else { $("#seccionRenovacion").hide(); }
    }
    function hideShowSeccionGarantia() {
        const cscClass = 'bg-blue'
        //"alert alert-primary"
        if (llevaGarantia()) {
            $("#mensaje-seccionGarantia").removeClass(cscClass);
            $("#seccionGarantia").show();
            $("#mensaje-seccionGarantia").text("");
        }
        else {
            $("#mensaje-seccionGarantia").addClass(cscClass);
            $("#seccionGarantia").hide();
            $("#mensaje-seccionGarantia").text("la clasificacion seleccionada no lleva garantia");
        }

    }
    function setIdCliente(idCliente) {
        const elemIdCliente = $("#@Html.IdFor(model => model.Prestamo.IdCliente)");
        elemIdCliente.val(idCliente);
        //console.log("id cliente establecida ", idCliente)
    }


    //Buscador de clientes
    IMAGEN_CLIENTE_EN_BUSCADOR = false;
    IMAGEN_CLIENTE_EN_DETALLES = false;

    DETALLES = true;
    let infoPrestamos=[]
    const onPrestamoEnter = async function () {
        let idPrestamo = $('[data-order="' + selectPointer + '"]').attr('data-idprestamo');
        let photoRoot = $('[data-order="' + selectPointer + '"]').attr('data-client-photo');
        let prestamoNumero = $('[data-order="' + selectPointer + '"]').attr('data-prestamonumero');
        // Funcion para buscar informacion del prestamo
        showPrestamo(idPrestamo, prestamoNumero);
    };
    const onPrestamoClick = async function (evt) {
        let idPrestamo = evt.currentTarget.getAttribute('data-idprestamo');
        let prestamoNumero = evt.currentTarget.getAttribute('data-prestamonumero');
        const index = evt.currentTarget.getAttribute('data-index');
        showPrestamo(idPrestamo, prestamoNumero);
    };

    async function showPrestamo(idPrestamo, prestamoNumero) {

        // buscar datos del cliente y datos de la garantia de la renovacion.
        const res = await loadPrestamoData(idPrestamo);
        const dataPrestamo = JSON.parse(res)
        const infoPrestamoRenovacion = dataPrestamo.infoPrestamo;
        infoPrestamoRenovacion.DeudaActual = 10000;
        $("#info-prestamo-a-renovar").val("Numero: " + prestamoNumero + " Deuda actual :" + infoPrestamoRenovacion.DeudaActual);
        $("#@Html.IdFor(model => model.Prestamo.DeudaRenovacion)").val(infoPrestamoRenovacion.DeudaActual);
        calcularTotalPrestado();
        $("#@Html.IdFor(model => model.Prestamo.IdPrestamoARenovar)").val(idPrestamo);
        const cliente = dataPrestamo.infoCliente;
        const rutaFotoCliente = "@Url.Content(@SiteDirectory.ImagesForClientes)/";
        let fotoCliente = rutaFotoCliente + cliente.Imagen1FileName;
            //cliente.Imagen1FileName;
        let infoClienteTmp = {
            "Imagen1Filename": fotoCliente,
            "NombreCompleto"  : cliente.Nombres + " " + cliente.Apellidos,
            "Telefonos" : cliente.TelefonoMovil,
            "NoIdentificacion": cliente.NumeracionDocumentoIdentidad,
            "IdCliente": cliente.IdCliente
        }
        showCliente(infoClienteTmp);
        const infoGarantias = [];
        $.each(dataPrestamo.infoGarantias, function (index, value) {
            const data = JSON.parse(value.Detalles);
            value.NoIdentificacion = value.NumeracionGarantia;
            //infoGarantias.push(value);
            //let infoGarantiaTmp = infoGarantias[0];
            //console.log(value);
            showGarantia(value);
        });

    }

    //// Buscador de garantias
    let searchType = 'garantia';
    let infoGarantias = []
    const onGarantiaEnter = async function () {
        let idGarantia = $('[data-order="' + selectPointer + '"]').attr('data-idGarantia');
        let index = $('[data-order="' + selectPointer + '"]').attr('data-index');
        const infoGarantia = infoGarantias[index]
        showGarantia(infoGarantia);
    };
    const onGarantiaClick = async function (evt) {
        let idGarantia = evt.target.getAttribute('data-idGarantia');
        const index = evt.currentTarget.getAttribute('data-index');
        const infoGarantia = infoGarantias[index]
        //console.log(infoGarantia);
        showGarantia(infoGarantia);
    };

    async function showGarantia(infoGarantia) {

    let Detalles = JSON.parse(infoGarantia.Detalles);
    //$("#p-info-garantia").remove()
    let idGarantia = infoGarantia.IdGarantia;
    let garantiaEnListado = idGarantias.includes(idGarantia);
    if (garantiaEnListado) return;
    $("#forIdGarantias").append(`<input id = "inputGarantia${idGarantia}" type = "hidden" name = "Prestamo.IdGarantias[${idGarantias.length}]" value = "${idGarantia}"/>`)
        idGarantias.push(idGarantia);
        updateCantidadDeGarantias(idGarantias.length);
        $("#info-garantia").append(`<span id="spanGarantia${idGarantia}"><button type="button" class="fa fa-remove" title="quitar garantia" onclick="removeGarantia(this)" value="${idGarantia}"></button><p id="p-info-garantia"> ${infoGarantia.NoIdentificacion} </strong> <strong> Marca:</strong> ${infoGarantia.NombreMarca} <strong> Modelo:</strong> ${infoGarantia.NombreModelo }<br>
                    <i> ${Detalles.Descripcion !== null ? Detalles.Descripcion + ', ' : ''}</i><strong> Año:</strong> ${Detalles.Ano} <strong> Placa:</strong> ${Detalles.Placa} <strong> Maquina:</strong> ${Detalles.NoMaquina}
                        <br></p> </span>`);
    };

    function calcularTasaInteresPorPeriodo() {
        const idTasaDeInteresSelected = $("#@Html.IdFor(m=>m.Prestamo.IdTasaInteres)").val();
        //console.log(tasasDeInteres);
        const tasaDeInteres = tasasDeInteres.find(function (item, i) {
            const igual = item.idTasaInteres == idTasaDeInteresSelected;
            //console.log(item, item.idTasaInteres, igual);
            if (igual) return item;
        }).InteresMensual;
        //console.log(tasaDeInteres);
        const searchParam = {
            tasaInteresMensual: tasaDeInteres,
            idPeriodo: $("#@Html.IdFor(model => model.Prestamo.IdPeriodo)").val()
        };

        $.ajax({
            type: "get",
            url: "/Prestamos/CalcularTasaInteresPorPeriodo",
            data: searchParam,
            dataType: "json",
            //contentType: 'text/html; charset=utf-8',
            contentType: 'application/json; charset=utf-8',
            tradition: true,
            success: function (response) {
                valorTasaDeInteresPorPeriodo = parseFloat(response.InteresDelPeriodo.toFixed(6));
                //console.log(typeof(valor));
                valorTasaDeInteresPorPeriodo
                const valorst = valorTasaDeInteresPorPeriodo.toString().replace(/([0-9]+(\.[0-9]+[1-9])?)(\.?0+$)/, '$1') + "%";
                $("#@Html.IdFor(model => model.Prestamo.TasaDeInteresPorPeriodo)").val(valorst);
            },
            complete: function () { calcularCuotas();}
        });
    }
    function updateCantidadDeGarantias(cantidad) { $("#cantidadDeGarantias").text(cantidad); }
    //// Buscador de cliente
    let IMAGEN_CLIENTE_EN_BUSCADOR_CLIENTE = true;
    let infoClientes=[]
    const onClienteEnter = async function () {
        // let idCliente = $('[data-order="' + selectPointer + '"]').attr('data-idCliente');
        const index = $('[data-order="' + selectPointer + '"]').attr('data-index');
        const infoCliente = infoClientes[index]
        showCliente(infoCliente);
    };

    const onClienteClick = async function (evt) {
        //let idCliente = evt.currentTarget.getAttribute('data-idCliente');
        const index = evt.currentTarget.getAttribute('data-index');
        const infoCliente = infoClientes[index]
        showCliente(infoCliente);
    };

    async function showCliente(infoCliente) {
        $("#p-info-cliente").empty();
        setIdCliente(infoCliente.IdCliente)
        $("#info-cliente").append(`<p id="p-info-cliente"> <img src="${infoCliente.Imagen1Filename}" height="60px" width="auto" class="float-left mr-2" style="border: 1px solid #666; border-radius: 10px;"/>
                                        <strong id="placeName" >Cliente: <i>${infoCliente.NombreCompleto} | <small style="font-weight: 600;"> </i> </span><br>
                                        <span style="font-weight: 600;">Telefono: </span> ${infoCliente.Telefonos} ${infoCliente.NoIdentificacion === undefined ? `` : ` | No. de identificacion: ${infoCliente.NoIdentificacion}`}</i><br>
                                        <br></p>`);
    };

    function BuildPrestamoData()
    {
        const fecha = $("#@Html.IdFor(model => model.Prestamo.FechaEmisionReal)").val();
        var fechaJs = "2020-08-30T00:00:00" //toDate(fecha);

        var prestamo =
        {
            IdPrestamo: -1,
            PrestamoNumero: '1',
            IdPrestamoARenovar: 1,
            IdClasificacion: 1,
            IdTipoAmortizacion: 1,
            IdCliente: 1,
            IdGarantias: idGarantias,
            FechaEmisionReal: fechaJs,
            /*IdCodeudores: [1, 2],
            FechaEmisionParaCalculos: fecha,
            IdTasaInteres: 1,
            IdTipoMora: 1,
            IdPeriodo: 1,
            CantidadDePeriodos: 10,
            MontoPrestado: 10000,
            DeudaRenovacion: 1000,
            LlevaGastoDeCierre: true,
            InteresGastaDeCierre: 5,
            MontoGastaoDeCierre: 500,
            GastoDeCierreEsDeducible: false,
            SumarGastoDeCierreALasCuotas: true,
            AcomodarFechaALasCuotas: false,
            FechaEmisionPrimeraCuota: "190001T00:00:00:00",
            IdNegocio: 1,
            IdLocalidad: 1,
            Usuario:"bryan"*/
        }
        return prestamo;
    }
    function removeGarantia(element) {
        const idGarantia = parseInt(element.value);
        const index = idGarantias.indexOf(idGarantia);
        if (index > -1) {
            idGarantias.splice(index, idGarantia);
            updateCantidadDeGarantias(idGarantias.length);
        }
        const findInput = $("#inputGarantia" + idGarantia);
        const findSpan = $("#spanGarantia" + idGarantia);
        //alert(`"input :${findInput.length} span ${findSpan.length}"`);
        findInput.remove();
        findSpan.remove();
        //console.log(idGarantias);
    }
    function showResponse(response) {
        //alert("respuesta recibida");
        //console.log(response);
    }

    function validarFormulario() {
        // el monto no puede estar en 0
        var validaciones = [];
        hayErrores = false;

        //if (isNaN(montoEmitidoAlCliente)) montoEmitidoAlCliente = 0;
        //console.log(montoEmitidoAlCliente);

        if (totalPrestado <= 0) {
            hayErrores = true;
            validaciones.push("")
            setSpanErrorForElem("@Html.NameFor(m=> m.MontoAPrestar)", "no hay monto a renovar ni ha especificado monto a prestar")
        }
        else { /*(console.log(totalPrestado, typeof (totalPrestado)));*/ }
        if ($("#@Html.IdFor(model => model.Prestamo.IdCliente)").val() <= 0) {
            hayErrores = true;
            setSpanErrorForElem("search-cliente-input", "no ha especificado ningun cliente")
        }

        if ((llevaGarantia()) && (idGarantias.length === 0))
        {
            hayErrores = true;
            setSpanErrorForElem("search-garantia-input", "no ha especificado ninguna garantia")
                //&& (idGarantias.length = 0))
        }
        if ($("#@Html.IdFor(model => model.IncluirRenovacion)").val()==="true")
        {
            const result = ($("#@Html.IdFor(model => model.Prestamo.IdPrestamoARenovar)").val() === "-1");
            if (result) {
                setSpanErrorForElem("input-prestamo_search", "no ha especificado ningun prestamo a renovar");
                hayErrores = true;
            }
        }
        const fecha = $("#@Html.IdFor(model => model.Prestamo.FechaEmisionReal)").val()
        const fechaDelPrestamo = moment(fecha, "DD/MM/YYYY");
        if (fechaDelPrestamo > moment()) {
            setSpanErrorForElem("@Html.NameFor(m => m.Prestamo.FechaEmisionReal)", "la fecha es invalida");
            hayErrores = true;
        }

        if (hayErrores) {
            showMessage('warning', 'Revisar', 'Tiene varios errores');
        }
        return hayErrores;
    }

    function postForm() {
        const postData = { idGarantias: idGarantias };
        if (validarFormulario()) return;
        let prestamoData2 = $("#frmEdtPrestamo").serialize();
        //prestamoData2 =  JSON.stringify(BuildPrestamoData()) ;
        console.log(prestamoData2);

            $.ajax({
            type: "post",
            url: "/Prestamos/GuardarPrestamo",
            data: prestamoData2,
            dataType: 'html',
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            //contentType: 'application/json; charset=utf-8',
            success: function (response) {
                showMessage('info', 'Felicidades', 'Su Prestamo fue procesado  y guardado correctamente')
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                    console.log(XMLHttpRequest.responseText);
                    const response = JSON.parse(XMLHttpRequest.responseText);
                    const prestamo = response.Prestamo;
                    const mensaje = response.Mensaje;
                    console.log(prestamo, mensaje);
                    showMessage('error', 'Revisar', XMLHttpRequest.responseText.Men);
                //console.log("Request: " + XMLHttpRequest.toString() + "\n\nStatus: " + textStatus + "\n\nError: " + errorThrown);
            },
            complete: function (jqXHR, status) {
                //console.log("complete");
            },

        })
    }
    function llevaGarantia() {
        const idClasif = parseFloat($("#@Html.IdFor(model => model.Prestamo.IdClasificacion)").val());
        const result = idClasifLLevanGarantias.includes(idClasif)
        return result;

    }



    function calcularCuotas() {


            //console.log(montoPrestado);
            $("#lista-cuotas").empty();
            if (totalCapital == 0) {
                    return;
                }
                //alert("calculando cuota 1");
                const fechaEmisionPrestamo = $("#@Html.IdFor(model => model.Prestamo.FechaEmisionReal)").val();
                const infoGenCuota = {
                    CantidadDePeriodos: $("#@Html.IdFor(m => m.Prestamo.CantidadDePeriodos)").val(),
                    IdPeriodo: $("#@Html.IdFor(m => m.Prestamo.IdPeriodo)").val(),
                    IdTipoAmortizacion: $("#@Html.IdFor(m => m.Prestamo.IdTipoAmortizacion)").val(),
                    MontoCapital: totalCapital,
                    MontoGastoDeCierre: montoGastoDeCierre,
                    FinanciarGastoDeCierre: ($("#@Html.IdFor(m=> m.Prestamo.FinanciarGastoDeCierre)").val() == 'true'),
                    CargarInteresAlGastoDeCierre: $("#@Html.IdFor(m => m.Prestamo.CargarInteresAlGastoDeCierre)").val(),
                    FechaEmisionReal: toDate(fechaEmisionPrestamo).toISOString(),
                    AcomodarFechaALasCuotas: $("#@Html.IdFor(m => m.Prestamo.AcomodarFechaALasCuotas)").val(),
                    FechaInicioPrimeraCuota: $("#@Html.IdFor(m => m.Prestamo.FechaInicioPrimeraCuota)").val(),
                    TasaDeInteresPorPeriodo: valorTasaDeInteresPorPeriodo,
                    OtrosGastosSinInteres: 0,
            }
            //alert("calculando cuota 2");
                console.log(infoGenCuota);
                $.ajax({
                    type: "get",
                    url: "/Prestamos/GenerarCuotas",
                    data: infoGenCuota,
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    tradition: true,
                    success: function (response) {
                        
                        let contador = 0;
                        let valorCuota = 0;
                        $("#lista-cuotas").append(
                            ` <tr> <th>Cuota</th> 
                                    <th>Fecha</th><th>Total</th> <th>Capital</th> <th> Interes </th> <th>G/Cierre</th> <th>Int. G.C.</th> <th>Ot. Cargos Sin int</th>  </tr>
                            `);
                        response.forEach(function (value, index) {
                            contador++;
                            console.log(value);
                            valorCuota = value.Total.toFixed(2);
                            $("#lista-cuotas").append(
                                `<tr>
                                    <td> ${index + 1}</td> 
                                    <td>${value.FechaSt}  </td> 
                                    <td>${value.Total.toFixed(2)} </td> 
                                    <td>${value.Capital.toFixed(2)}  </td> 
                                    <td>${value.Interes.toFixed(2)} </td> 
                                    <td>${value.GastoDeCierre.toFixed(2)} </td> 
                                    <td>${value.InteresDelGastoDeCierre.toFixed(2)} </td> 
                                    <td>${value.OtrosCargosSinInteres.toFixed(2)} </td> 
                                    
                                </tr>`)
                            $("#lista-cuotas").append(`</table>`)
                            });
                        $("#cuotaExplicacion").html(`<h2>Forma de pago ${contador} cuotas por valor de ${valorCuota}</h2>`)
                    },
                });
        }

    </script>

    @*<script src="~/Scripts/Apps/validate-form-Inputs.js"></script>*@
    <script src="~/Scripts/Apps/Prestamo/search.js"></script>
    <script src="~/Scripts/Apps/Garantia/search.js"></script>
    <script src="~/Scripts/Apps/Cliente/search.js"></script>
    @*<script src="~/Scripts/Apps/keyBehavior.js"></script>*@


}


