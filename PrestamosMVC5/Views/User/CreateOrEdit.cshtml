@model UserModel
@{
    ViewBag.Title = "Crear Editar Usuario";
    Layout = "~/Views/Shared/_LayoutForms.cshtml";
}

@section PageStyle    {
    <link href="~/Content/ValidationErrors.css" rel="stylesheet" />
    <link href="~/Content/customcss/switch.css" rel="stylesheet">

}


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmEdtUser" }))
{
    <div class="@HtmlClass.FormGroupCls">
        <h2>Crear Editar Usuario</h2>
        <br>
        <input id="btnSubmit2" type="submit" value="Guardar" class="btn btn-primary" />
        @Html.ActionLink("Back to List", "Index")
    </div>

    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Usuario.RazonBloqueo);
    @Html.HiddenFor(model => model.ForActivo);
    @Html.HiddenFor(model => model.ForBloqueado);
    @Html.HiddenFor(model => model.ForCambiarContraseñaAlIniciarSesion);
    @Html.HiddenFor(model => model.Usuario.IdUsuario)
    @*
        getting value from modelstate
        @Html.Raw(@ViewData.ModelState.Values);
        var data = @ViewData.ModelState.Values.FirstOrDefault();
        var error = data.Errors.FirstOrDefault();
        <h2>@error.ErrorMessage</h2>
    *@
    @Html.ValidationSummary(true, "", new { @class = "text-danger", @id = "mensajeError" })
    <div class="clearfix"></div>
    <div class="row">
        <!-- form input mask -->
        <div class="col-md-6 col-sm-12">
            <div class="x_panel">
                <div class="x_content">
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Usuario.LoginName, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @{
                                if (Model.Usuario.IdUsuario == 0)
                                {
                                    var _class = HtmlClass.InputTextCls + " text-lowercase";
                                    @Html.EditorFor(model => model.Usuario.LoginName, new { htmlAttributes = new { @class = @_class } })
                                    @Html.ValidationMessageFor(model => model.Usuario.LoginName, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.Usuario.LoginName);
                                    <p class="h2">@Model.Usuario.LoginName</p>
                                }
                            }
                        </div>
                    </div>


                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Usuario.NombreRealCompleto, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.Usuario.NombreRealCompleto, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                            @Html.ValidationMessageFor(model => model.Usuario.NombreRealCompleto, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <br />
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Usuario.DebeCambiarContraseñaAlIniciarSesion, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.Usuario.DebeCambiarContraseñaAlIniciarSesion, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                            @*CambiarContraseñaAlIniciarSesion()*@
                            @Html.ValidationMessageFor(model => model.Usuario.DebeCambiarContraseñaAlIniciarSesion, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @{
                        if (Model.Usuario.IdUsuario <= 0)
                        {
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Contraseña, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Contraseña, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @disabled = (Model.Usuario.DebeCambiarContraseñaAlIniciarSesion ? "disable" : "") } })
                                    @Html.ValidationMessageFor(model => model.Contraseña, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.ConfirmarContraseña, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.ConfirmarContraseña, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @disabled = (Model.Usuario.DebeCambiarContraseñaAlIniciarSesion ? "disable" : "") } })
                                    @Html.ValidationMessageFor(model => model.ConfirmarContraseña, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                    }
                </div>

            </div>
            <div class="x_panel">
                <h2>Otras Informaciones</h2>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.CorreoElectronico, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.CorreoElectronico, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                        @Html.ValidationMessageFor(model => model.Usuario.CorreoElectronico, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.Telefono1, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.Telefono1, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @data_tel = "true" } })
                        @Html.ValidationMessageFor(model => model.Usuario.Telefono1, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.Telefono2, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.Telefono2, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @data_tel = "true" } })
                        @Html.ValidationMessageFor(model => model.Usuario.Telefono2, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
        </div>
        @{
            if (Model.ShowAdvancedOptions)
            {

                <div class="col-md-6 col-sm-12">
                    <div class="x_panel">
                        <div class="x_title">
                            <h2>Mas Opciones <small>avanzadas </small></h2>
                            <ul class="nav navbar-right panel_toolbox">
                                <li>
                                    <a class="collapse-link">
                                        <i class="fa fa-chevron-down"></i>
                                    </a>

                                </li>
                            </ul>
                            <div class="clearfix"></div>
                        </div>
                        <div class="collapse x_content">
                            <h2>Opciones</h2>
                            <input data-val="true"
                                   class="checkbox"
                                   data-val-required="The isNewlyEnrolled field is required."
                                   id="Usuario_Activo"
                                   name="Usuario.Activo"
                                   type="checkbox"
                                   value="true" />
                            <label for="Usuario_Activo" class="switch" id="switch"></label>
                            @*<div class="@HtmlClass.FormGroupCls">
                                    @Html.LabelFor(model => model.Usuario.Activo, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                    <div class="@HtmlClass.DivInputCls">
                                        @Html.EditorFor(model => model.Usuario.Activo, new
                                   { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                        @Html.ValidationMessageFor(model => model.Usuario.Activo, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Usuario.Bloqueado, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Usuario.Bloqueado, new
                               { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                    @Html.ValidationMessageFor(model => model.Usuario.Bloqueado, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.LaContraseñaExpira, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.LaContraseñaExpira, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                    @Html.ValidationMessageFor(model => model.LaContraseñaExpira, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.ContraseñaExpiraCadaXMes, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.DropDownListFor(model => model.ContraseñaExpiraCadaXMes, SelectItems.Lista12Meses, htmlAttributes: new { @class = @HtmlClass.InputTextCls })

                                    @*@Html.ValidationMessageFor(model => model.ContraseñaExpiraCadaXMes, "", new { @class = "text-danger" })*@
                                    <span id="textoContraseñaExpira"></span>
                                </div>
                            </div>

                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.LimitarVigenciaDeCuenta, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.LimitarVigenciaDeCuenta, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                    @Html.ValidationMessageFor(model => model.LimitarVigenciaDeCuenta, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Usuario.VigenteDesde, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Usuario.VigenteDesde, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                                    @Html.ValidationMessageFor(model => model.Usuario.VigenteDesde, "", new { @class = "text-danger" })
                                    <span id="textoVigenteDesde"></span>
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Usuario.VigenteHasta, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Usuario.VigenteHasta, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                                    @Html.ValidationMessageFor(model => model.Usuario.VigenteHasta, "", new { @class = "text-danger" })
                                    <span id="textoVigenteHasta"></span>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

            }

        }
    </div>
}

@section Scripts {
    <script>
        /*
* experiencias aprendidas
* no eliminar los campos ocultos que se crean en los campos checkbox, y no manipular su valor por jquery
* ya que aparentemente el razon lo resuelve con el campo oculto y algo que hace el jquery que aun no lo se
* si es necesario establecer el valor del check  para que el dom usado en jquery tenga conocimiento
* tambien tenemos como obtener los errores del modelstate para darle una manipulacion distinta a la que razor
* le da.
* el Model realmente es una propiedad en el ViewData puedes accesarlo
* por ejemplo ViewData.Model.Usuario.Contraseña
* para los data-dash ejemplo "data-val", no funciona con prop sino con attr
*/
    </script>
    <script src="~/Scripts/Apps/CreateOrEditUser.js"></script>
    <script src="~/Scripts/Apps/manageErrorMessageOnForms.js"></script>

    @*<script src="~/Scripts/Apps/validate-form-Inputs.js"></script>*@

}

