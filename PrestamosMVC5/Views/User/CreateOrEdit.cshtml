@model UserModel
@{
    ViewBag.Title = "Crear Editar Usuario";
    Layout = "~/Views/Shared/_LayoutForms.cshtml";
}


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmEdtUser" }))
{
    <div class="@HtmlClass.FormGroupCls">
        <h2>Crear Editar Usuario</h2>
        <input id="btnSubmit2" type="submit" value="Guardar" class="btn btn-outline-info" />
        @Html.ActionLink("Back to List", "Index")
    </div>

    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Usuario.RazonBloqueo);
    @Html.HiddenFor(model => model.ForActivo);
    @Html.HiddenFor(model => model.ForBloqueado);
    @Html.HiddenFor(model => model.ForCambiarContraseñaAlIniciarSesion);
    @Html.HiddenFor(model => model.Usuario.IdUsuario)
    @*
        getting value from modelstate
        @Html.Raw(@ViewData.ModelState.Values);
        var data = @ViewData.ModelState.Values.FirstOrDefault();
        var error = data.Errors.FirstOrDefault();
        <h2>@error.ErrorMessage</h2>
    *@
    @Html.ValidationSummary(true, "", new { @class = "text-danger", @id = "mensajeError" })
    <div class="clearfix"></div>
    <div class="row">
        <!-- form input mask -->
        <div class="col-md-6 col-sm-12">
            <div class="x_panel">
                <div class="x_content">
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Usuario.LoginName, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @{
                                if (Model.Usuario.IdUsuario == 0)
                                {
                                    var _class = HtmlClass.InputTextCls + " text-lowercase";
                                    @Html.EditorFor(model => model.Usuario.LoginName, new { htmlAttributes = new { @class = @_class } })
                                    @Html.ValidationMessageFor(model => model.Usuario.LoginName, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.Usuario.LoginName);
                                    <p class="h2">@Model.Usuario.LoginName</p>
                                }
                            }
                        </div>
                    </div>


                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Usuario.NombreRealCompleto, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.Usuario.NombreRealCompleto, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                            @Html.ValidationMessageFor(model => model.Usuario.NombreRealCompleto, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <br />
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Usuario.DebeCambiarContraseñaAlIniciarSesion, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.Usuario.DebeCambiarContraseñaAlIniciarSesion, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                            @*CambiarContraseñaAlIniciarSesion()*@
                            @Html.ValidationMessageFor(model => model.Usuario.DebeCambiarContraseñaAlIniciarSesion, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @{
                        if (Model.Usuario.IdUsuario <= 0)
                        {
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Contraseña, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Contraseña, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @disabled = (Model.Usuario.DebeCambiarContraseñaAlIniciarSesion ? "disable" : "") } })
                                    @Html.ValidationMessageFor(model => model.Contraseña, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.ConfirmarContraseña, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.ConfirmarContraseña, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @disabled = (Model.Usuario.DebeCambiarContraseñaAlIniciarSesion ? "disable" : "") } })
                                    @Html.ValidationMessageFor(model => model.ConfirmarContraseña, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                    }
                </div>

            </div>
            <div class="x_panel">
                <h2>Otras Informaciones</h2>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.CorreoElectronico, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.CorreoElectronico, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                        @Html.ValidationMessageFor(model => model.Usuario.CorreoElectronico, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.Telefono1, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.Telefono1, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @data_tel = "true" } })
                        @Html.ValidationMessageFor(model => model.Usuario.Telefono1, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.Telefono2, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.Telefono2, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @data_tel = "true" } })
                        @Html.ValidationMessageFor(model => model.Usuario.Telefono2, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
        </div>
        @{
            if (Model.ShowAdvancedOptions)
            {

                <div class="col-md-6 col-sm-12">
                    <div class="x_panel">
                        <div class="x_title">
                            <h2>Mas Opciones <small>avanzadas </small></h2>
                            <ul class="nav navbar-right panel_toolbox">
                                <li>
                                    <a class="collapse-link">
                                        <i class="fa fa-chevron-down"></i>
                                    </a>
                                            
                                </li>
                            </ul>
                            <div class="clearfix"></div>
                        </div>
                        <div class="collapse x_content">
                            <h2>Opciones</h2>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Usuario.Activo, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Usuario.Activo, new
                               { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                    @Html.ValidationMessageFor(model => model.Usuario.Activo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Usuario.Bloqueado, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Usuario.Bloqueado, new
                               { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                    @Html.ValidationMessageFor(model => model.Usuario.Bloqueado, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.LaContraseñaExpira, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.LaContraseñaExpira, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                    @Html.ValidationMessageFor(model => model.LaContraseñaExpira, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.ContraseñaExpiraCadaXMes, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.DropDownListFor(model => model.ContraseñaExpiraCadaXMes, SelectItems.Lista12Meses, htmlAttributes: new { @class = @HtmlClass.InputTextCls })

                                    @*@Html.ValidationMessageFor(model => model.ContraseñaExpiraCadaXMes, "", new { @class = "text-danger" })*@
                                    <span id="textoContraseñaExpira"></span>
                                </div>
                            </div>

                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.LimitarVigenciaDeCuenta, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.LimitarVigenciaDeCuenta, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                                    @Html.ValidationMessageFor(model => model.LimitarVigenciaDeCuenta, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Usuario.VigenteDesde, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Usuario.VigenteDesde, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                                    @Html.ValidationMessageFor(model => model.Usuario.VigenteDesde, "", new { @class = "text-danger" })
                                    <span id="textoVigenteDesde"></span>
                                </div>
                            </div>
                            <div class="@HtmlClass.FormGroupCls">
                                @Html.LabelFor(model => model.Usuario.VigenteHasta, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                                <div class="@HtmlClass.DivInputCls">
                                    @Html.EditorFor(model => model.Usuario.VigenteHasta, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                                    @Html.ValidationMessageFor(model => model.Usuario.VigenteHasta, "", new { @class = "text-danger" })
                                    <span id="textoVigenteHasta"></span>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

            }

        }
    </div>
}

@section Scripts {
    <script>
        let formId = '#frmEdtUser';
        let formulario = $(formId);
        // set IdElement;
        let idContraseñaText = "Contrase_a";
        let idConfirmarContraseñaText = "ConfirmarContrase_a";
        let idUsuarioDebeCambiarContraseñaAlIniciarSesionText = "Usuario_DebeCambiarContrase_aAlIniciarSesion";
        let idLaContraseñaExpiraText = "LaContrase_aExpira";
        let idUsuarioBloqueadoText = "Usuario_Bloqueado";
        let IdUsuarioActivoText = "Usuario_Activo";
        let idContraseñaExpiraCadaXMesText = "Contrase_aExpiraCadaXMes";
        let idLimitarVigenciaDeCuentaText = "LimitarVigenciaDeCuenta";
        let idVigenteHastaText = "Usuario_VigenteHasta";
        let idVigenteDesdeText= "Usuario_VigenteDesde";

        let elemContraseña = $("#"+idContraseñaText);
        let elemConfirmarContraseña = $("#"+idConfirmarContraseñaText);
        let elemDebeCambiarContrasenaAlIniciarSesion = $("#"+idUsuarioDebeCambiarContraseñaAlIniciarSesionText);
        let elemBloqueado = $("#" + idUsuarioBloqueadoText)
        let elemActivo = $("#" + IdUsuarioActivoText);
        let elemContraseñaExpiraCadaXMes= $("#"+idContraseñaExpiraCadaXMesText);
        let elemContraseñaExpira = $('#' + idLaContraseñaExpiraText);
        let elemLimitarVigenciaDeCuenta = $("#" + idLimitarVigenciaDeCuentaText);
        let elemVigenteHasta = $("#" + idVigenteHastaText);
        let elemVigenteDesde = $("#" + idVigenteDesdeText);
        let equalToValue = elemConfirmarContraseña.attr("data-val-equalto");
        let equalToOtherValue = elemConfirmarContraseña.attr("data-val-equalto-other");
        let dateFormat = 'en-GB';
        let yearRangeForDP = "+0:+1";
        initialViewState();
        $('.collapsed').css('height', 'auto');
        $('.collapsed').find('.x_content').css('display', 'none');
        $('.collapsed').find('i').toggleClass('fa-chevron-up fa-chevron-down');

        function removeDuplicateInputsCreateByRazor()
        {
            $("input[type=hidden][value=false]").each(function () {
                let name = $(this).prop("name");
                let count = $("input[name='" + name + "']");
                if (count.length > 1)
                {
                    $(this).remove();
                }
            });
        }
        function initialViewState() {
            //removeDuplicateInputsCreateByRazor();
            if (@Model.Usuario.IdUsuario<= 0)
            {
                elemActivo.prop({ readOnly: true });
                elemBloqueado.prop({ readOnly: true });
            }
            initInputs();
        }

        function initInputs() {
            setInitialCheckedValues();
            if (@Model.ShowAdvancedOptions.ToString().ToLower()) {
                onUsuarioActivoChange();
                onUsuarioBloqueadoChange();
                onCambiarContraseñaAlIniciarSesion();
                onContraseñaExpiraChange();
                onLimitarVigenciaDeCuentaChange();
            }
        }

        function setInitialCheckedValues() {
            //elemLimitarVigenciaDeCuenta.prop({ value: valor });
            setInitValueForCheckAndValueProp(elemDebeCambiarContrasenaAlIniciarSesion, "@Model.Usuario.DebeCambiarContraseñaAlIniciarSesion");
            setInitValueForCheckAndValueProp(elemActivo, "@Model.Usuario.Activo");
            setInitValueForCheckAndValueProp(elemBloqueado, "@Model.Usuario.Bloqueado");
            setInitValueForCheckAndValueProp(elemContraseñaExpira,"@Model.LaContraseñaExpira");
            setInitValueForCheckAndValueProp(elemLimitarVigenciaDeCuenta,
                "@Model.LimitarVigenciaDeCuenta");
        }

        function setInitValueForCheckAndValueProp(elem, _value) {
            _value = _value.toLowerCase();
            elem.prop(":checked", _value);
            elem.prop({ value: _value });
        }

        function setFecha(elem, name) {
            d = new Date();
            if (elem.prop("id")== idVigenteHastaText) {
                d.setFullYear(@Model.Usuario.VigenteHasta.Year, @Model.Usuario.VigenteHasta.Month-1, @Model.Usuario.VigenteHasta.Day );
            }
            if (elem.prop("id")== idVigenteDesdeText) {
                d.setFullYear(@Model.Usuario.VigenteDesde.Year, @Model.Usuario.VigenteDesde.Month-1, @Model.Usuario.VigenteDesde.Day );
            }
            let n = d.toLocaleDateString(dateFormat);
            elem.val(n);
        }

        function onChangeProp(elem) {
            let elemId = elem.id;

            switch (elemId) {
                case idUsuarioDebeCambiarContraseñaAlIniciarSesionText:
                    onCambiarContraseñaAlIniciarSesion();
                    break;
                case idLaContraseñaExpiraText:
                    onContraseñaExpiraChange();
                    break;
                case idLimitarVigenciaDeCuentaText:
                    onLimitarVigenciaDeCuentaChange()
                    break;
                case IdUsuarioActivoText:
                    onUsuarioActivoChange();
                    break;
                case idUsuarioBloqueadoText:
                    onUsuarioBloqueadoChange();
                case "verMasOpciones":

                    break;
            }
        }

        function onUsuarioActivoChange()
        {
            let valor = elemActivo.is(':checked');
            elemActivo.prop({ value: valor });
            $("#ForActivo").prop({ value: valor });

        }

        function onUsuarioBloqueadoChange()
        {
            let valor = elemBloqueado.is(':checked');
            elemBloqueado.prop({ value: valor });
            $("#ForBloqueado").prop({ value: valor });
            console.log($("#ForBloqueado").prop("value"));
        }

        function onCambiarContraseñaAlIniciarSesion()
        {
            var result = (elemDebeCambiarContrasenaAlIniciarSesion.is(':checked'))
            //alert(result);
            if (result) {
                elemContraseña.attr("data-val", "false");
                elemConfirmarContraseña.attr("data-val", "false");
                var elemContraseñaError = $("#Contrase_a-error");
                var elemConfirmarContraseñaError = $("#ConfirmarContrase_a-error")
                elemContraseñaError.text("");
                elemConfirmarContraseñaError.text("");
            }
            else
            {
                elemContraseña.attr("data-val", "true");
                elemConfirmarContraseña.attr("data-val", "true");
            }
            elemDebeCambiarContrasenaAlIniciarSesion.prop({ value: result });
            $("#ForCambiarContrase_aAlIniciarSesion").prop({ value: result });
            elemContraseña.prop('disabled', result);
            elemConfirmarContraseña.prop('disabled', result);
        }

        function onContraseñaExpiraChange()
        {
            let contraseñaExpira = elemContraseñaExpira.is(':checked')
            elemContraseñaExpira.prop({ value: contraseñaExpira});
            contraseñaExpira ? elemContraseñaExpiraCadaXMes.show() : elemContraseñaExpiraCadaXMes.hide();
            // elemContraseñaExpiraCadaXMes.removeAttr("readonly");
            let elemTextoContraseñaExpiraCadaXMes = $("textoContraseñaExpiraCadaXMes");
            // *** elemContraseñaExpira.prop({value: contraseñaExpira });
            let elemTextoContraseñaExpira = $("#textoContraseñaExpira");
            if (contraseñaExpira) { elemTextoContraseñaExpira.hide() }
            else {
                    elemTextoContraseñaExpira.text("Nunca Expira");
                    elemTextoContraseñaExpira.show();
            };
        }
        function onLimitarVigenciaDeCuentaChange() {
            let limitarVigencia = elemLimitarVigenciaDeCuenta.is(':checked');
            elemLimitarVigenciaDeCuenta.prop({ value: limitarVigencia });
            limitarVigencia ? elemVigenteHasta.show() : elemVigenteHasta.hide();
            limitarVigencia ? elemVigenteDesde.show() : elemVigenteDesde.hide();
            let elemTextoVigenteDesde = $("#textoVigenteDesde");
            let elemTextoVigenteHasta = $("#textoVigenteHasta");
            if (limitarVigencia) {
                elemTextoVigenteDesde.hide();
                elemTextoVigenteHasta.hide();
            }
            else {
                elemTextoVigenteDesde.text("No esta limitada");
                elemTextoVigenteHasta.text("No esta limitada");
                elemTextoVigenteDesde.show();
                elemTextoVigenteHasta.show();
            };
            // *** elemLimitarVigenciaDeCuenta.prop({ value: limitarVigencia });
        }





        function turnOnOffValidations2(elem)
        {
            let propName = elem.prop("name");
            if (propName === "Contraseña" || propName === "ConfirmarContraseña")
            {
                if (elemDebeCambiarContrasenaAlIniciarSesion.is(':checked'))
                {
                    elem.rules('remove', 'required');
                }
                else
                {
                    elem.rules('add', 'required');
                    if (propName === "ConfirmarContraseña")
                    {

                    }
                }
            }
        }
    /*
     * experiencias aprendidas
     * no eliminar los campos ocultos que se crean en los campos checkbox, y no manipular su valor por jquery
     * ya que aparentemente el razon lo resuelve con el campo oculto y algo que hace el jquery que aun no lo se
     * si es necesario establecer el valor del check  para que el dom usado en jquery tenga conocimiento
     * tambien tenemos como obtener los errores del modelstate para darle una manipulacion distinta a la que razor
     * le da.
     * el Model realmente es una propiedad en el ViewData puedes accesarlo
     * por ejemplo ViewData.Model.Usuario.Contraseña
     * para los data-dash ejemplo "data-val", no funciona con prop sino con attr
    */
    </script>
    <script src="~/Scripts/Apps/manageErrorMessageOnForms.js"></script>

    @*<script src="~/Scripts/Apps/validate-form-Inputs.js"></script>*@

}

