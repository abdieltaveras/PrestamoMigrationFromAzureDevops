@model UserModel

@{
    ViewBag.Title = "Crear Editar Usuario";
    Layout = "~/Views/Shared/_LayoutForms.cshtml";
}
@*<style>
    input[data2-spin=true]::-webkit-inner-spin-button {
        opacity: 1
    }
</style>*@

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmCreateUser" }))
{
    <div class="@HtmlClass.FormGroupCls">
        <h2>Crear Editar Usuario</h2>
        <input id="btnSubmit2" type="submit" value="Guardar" class="btn btn-outline-info" />
        @Html.ActionLink("Back to List", "Index")
    </div>

    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Usuario.Usuario);
    @Html.HiddenFor(model => model.Usuario.IdNegocio);
    @Html.ValidationSummary(false, "", new { @class = "text-danger", @id = "mensajeError" })
    <div class="clearfix"></div>
    <div class="row">
        <!-- form input mask -->
        <div class="col-md-6 col-sm-12">
            <div class="x_panel">
                <div class="x_content">
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Usuario.LoginName, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @{
                                if (Model.Usuario.IdUsuario == 0)
                                {
                                    var _class = HtmlClass.InputTextCls + " text-lowercase";
                                    @Html.EditorFor(model => model.Usuario.LoginName, new { htmlAttributes = new { @class = @_class } })
                                    @Html.ValidationMessageFor(model => model.Usuario.LoginName, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.Usuario.LoginName);
                                    <p class="h2">@Model.Usuario.LoginName</p>
                                }
                            }
                        </div>
                    </div>

                    @Html.HiddenFor(model => model.Usuario.IdUsuario, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Usuario.NombreRealCompleto, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.Usuario.NombreRealCompleto, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                            @Html.ValidationMessageFor(model => model.Usuario.NombreRealCompleto, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <br />
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Usuario.DebeCambiarContraseñaAlIniciarSesion, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.Usuario.DebeCambiarContraseñaAlIniciarSesion, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                            @*CambiarContraseñaAlIniciarSesion()*@
                            @Html.ValidationMessageFor(model => model.Usuario.DebeCambiarContraseñaAlIniciarSesion, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.Contraseña, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.Contraseña, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @disabled = (Model.Usuario.DebeCambiarContraseñaAlIniciarSesion ? "disable" : "") } })
                            @Html.ValidationMessageFor(model => model.Contraseña, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="@HtmlClass.FormGroupCls">
                        @Html.LabelFor(model => model.ConfirmarContraseña, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                        <div class="@HtmlClass.DivInputCls">
                            @Html.EditorFor(model => model.ConfirmarContraseña, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @disabled = (Model.Usuario.DebeCambiarContraseñaAlIniciarSesion ? "disable" : "") } })
                            @Html.ValidationMessageFor(model => model.ConfirmarContraseña, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

            </div>
            <div class="x_panel">
                <h2>Opciones</h2>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.Activo, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.Activo, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls } })
                    </div>
                </div>


                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.Bloqueado, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.Bloqueado, new
                        { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls } })

                        @Html.ValidationMessageFor(model => model.Usuario.Bloqueado, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.LimitarVigenciaDeCuenta, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.LimitarVigenciaDeCuenta, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                        @Html.ValidationMessageFor(model => model.LimitarVigenciaDeCuenta, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.UsuarioValidoHasta, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.UsuarioValidoHasta, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                        @Html.ValidationMessageFor(model => model.Usuario.UsuarioValidoHasta, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.LaContraseñaExpira, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.LaContraseñaExpira, new { htmlAttributes = new { @class = @HtmlClass.CheckBoxCls, @onchange = "onChangeProp(this)" } })
                        @Html.ValidationMessageFor(model => model.LaContraseñaExpira, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.ContraseñaExpiraCadaXMes, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.ContraseñaExpiraCadaXMes, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @type = "number", @data_spin = "true", @max = "12", @min = "1", @disabled = (!Model.Usuario.LaContrasenaExpira() ? "disabled" : "") } }) Mes(es)
                        @Html.ValidationMessageFor(model => model.ContraseñaExpiraCadaXMes, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-sm-12">
            <div class="x_panel">
                <h2>Otras Informaciones</h2>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.CorreoElectronico, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.CorreoElectronico, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls } })
                        @Html.ValidationMessageFor(model => model.Usuario.CorreoElectronico, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.Telefono1, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.Telefono1, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @data_tel = "true" } })
                        @Html.ValidationMessageFor(model => model.Usuario.Telefono1, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="@HtmlClass.FormGroupCls">
                    @Html.LabelFor(model => model.Usuario.Telefono2, htmlAttributes: new { @class = @HtmlClass.LabelCls })
                    <div class="@HtmlClass.DivInputCls">
                        @Html.EditorFor(model => model.Usuario.Telefono2, new { htmlAttributes = new { @class = @HtmlClass.InputTextCls, @data_tel = "true" } })
                        @Html.ValidationMessageFor(model => model.Usuario.Telefono2, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        //let formId = '#frmCreateUser';
        //let formulario = $(formId);
        // set IdElement;
        let idContraseñaText = "Contrase_a";
        let idConfirmarContraseñaText = "ConfirmarContrase_a";
        let idUsuarioDebeCambiarContraseñaAlIniciarSesionText = "Usuario.DebeCambiarContrase_aAlIniciarSesion";
        let idLaContraseñaExpiraText = "LaContrase_aExpira";
        let idUsuarioBloqueadoText = "Usuario_Bloqueado";
        let IdUsuarioActivoText = "Usuario_Activo";
        let idContraseñaExpiraCadaXMesText = "Contrase_aExpiraCadaXMes";
        let idLimitarVigenciaDeCuentaText = "LimitarVigenciaDeCuenta";
        let idUsuarioValidoHastaText= "Usuario_UsuarioValidoHasta";

        let elemContraseña = $("#"+idContraseñaText);
        let elemConfirmarContraseña = $("#"+idConfirmarContraseñaText);
        let elemCheckDebeCambiarContrasena = $("#"+idUsuarioDebeCambiarContraseñaAlIniciarSesionText);
        let elemBloqueado = $("#" + idUsuarioBloqueadoText)
        let elemActivo = $("#" + IdUsuarioActivoText);
        let elemContraseñaExpiraCadaXMes= $("#"+idContraseñaExpiraCadaXMesText);
        let elemContraseñaExpira = $('#' + idLaContraseñaExpiraText);
        let elemLimitarVigenciaDeCuenta = $("#" + idLimitarVigenciaDeCuentaText);
        let elemUsuarioValidoHasta = $("#" + idUsuarioValidoHastaText);

        let equalToValue = elemConfirmarContraseña.attr("data-val-equalto");
        let equalToOtherValue = elemConfirmarContraseña.attr("data-val-equalto-other");
        let dateFormat = 'en-GB';
        removeDuplicateInputs();
        initInputs();

        function setFecha(elem, name) {
            alert("setFecha");
            d = new Date();

            if (elem.id == idUsuarioValidoHastaText) {
                d.setFullYear(@Model.Usuario.UsuarioValidoHasta.Year, @Model.Usuario.UsuarioValidoHasta.Month-1, @Model.Usuario.UsuarioValidoHasta.Day );
            }
            let n = d.toLocaleDateString(dateFormat);
            elem.val(n);
        }
        function onChangeProp(elem) {
            let elemId = elem.id;
            switch (elemId) {
                case idUsuarioDebeCambiarContraseñaAlIniciarSesionText:
                    onCambiarContraseñaAlIniciarSesion();
                    break;
                case idLaContraseñaExpiraText:
                    onContraseñaExpiraChange();
                    break;
                case idLimitarVigenciaDeCuentaText:
                    onLimitarVigenciaDeCuentaChange()
                    break;
            }
        }
        function removeDuplicateInputs()
        {
            $("input[type=hidden][value=false]").each(function () {
                $(this).remove();
            });
        }
        function onContraseñaExpiraChange()
        {
            elemContraseñaExpiraCadaXMes.prop({ disabled: !elemContraseñaExpira.is(':checked') });
            elemContraseñaExpiraCadaXMes.removeAttr("readonly");
        }
        function onLimitarVigenciaDeCuentaChange() {
            elemUsuarioValidoHasta.prop({ disabled: !elemLimitarVigenciaDeCuenta.is(':checked') });

        }
        function initInputs() {
            if (@Model.Usuario.IdUsuario<= 0)
            {
                elemBloqueado.prop({ readOnly: true });
                elemActivo.prop({ readOnly: true });
                elemContraseñaExpiraCadaXMes.prop({ readOnly: true });
            }

            onContraseñaExpiraChange();
            onLimitarVigenciaDeCuentaChange();
        }

        //onCambiarContraseñaAlIniciarSesion();
        function onCambiarContraseñaAlIniciarSesion()
        {
            var result = (elemCheckDebeCambiarContrasena.is(':checked'))
            if (result) {
                console.log("no validar las contraseñas");
                elemContraseña.prop({ value: "" });
                elemConfirmarContraseña.prop('value', "");
                elemContraseña.attr("data-val", "false");
                elemConfirmarContraseña.attr("data-val", "false");
                var elemContraseñaError = $("#Contrase_a-error");
                var elemConfirmarContraseñaError = $("#ConfirmarContrase_a-error")
                elemContraseñaError.text("");
                elemConfirmarContraseñaError.text("");
            }
            else
            {
                elemContraseña.attr("data-val", "true");
                elemConfirmarContraseña.attr("data-val", "true");
            }
            elemContraseña.prop('disabled', result);
            elemConfirmarContraseña.prop('disabled', result);
        }

        function turnOnOffValidations(elem)
        {
            let propName = elem.prop("name");
            if (propName === "Contraseña" || propName === "ConfirmarContraseña")
            {
                if (elemCheckDebeCambiarContrasena.is(':checked'))
                {
                    elem.rules('remove', 'required');
                }
                else
                {
                    elem.rules('add', 'required');
                    if (propName === "ConfirmarContraseña")
                    {

                    }
                }
            }
        }
    </script>
    @*<script src="~/Scripts/Apps/validate-form-Inputs.js"></script>*@
}
