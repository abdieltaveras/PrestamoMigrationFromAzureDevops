@inject IDialogService DialogService 
@if (ShowButton)
{
<MudButton OnClick="ModalShow" Color="MudBlazor.Color.Primary" Variant="Variant.Filled">@ButtonText</MudButton>
    @*<button class="btn btn-primary" @onclick="@ModalShow" @onclick:preventDefault>@ButtonText</button>*@
}
else
{
    showModal = true;
}


<hr />
@code
{
    @*[Inject]
    private IDialogService DialogService { get; set; }*@

[Parameter]
public bool ShowButton { get; set; } = true;

[Parameter]
public string ButtonText { get; set; }
[Parameter]
public Object objRef { get; set; }

[Parameter]
public EventCallback<object> OnClose { get; set; }

[Parameter]
public EventCallback<object> OnCancel { get; set; }

[Parameter]
public EventCallback<object> OnOk { get; set; }

[Parameter]
public string CancelText { get; set; } = "No";

[Parameter]
public string OkText { get; set; } = "Si";

[Parameter]
public string Title { get; set; } = "Confirmacion de accion";

[Parameter]
public string ConfirmationMessage { get; set; } = "debe indicar valor al parametro ConfirmationMessage";

bool showModal = false;
string state = "Message box hasn't been opened yet";
    @*void ModalShow() => showModal = true;*@
private async Task ModalShow()
{
    bool? result = await DialogService.ShowMessageBox(
          ConfirmationMessage,
          "",
          yesText: OkText, cancelText: CancelText);
    if (result == null)
    {
        OnCancelClick();
    }
    else
    {
        OnOkClick();
    }
    @*state = result == null ? await OnCancelClick : "Deleted!";*@
    StateHasChanged();
}
void OnCloseClick()
{
    showModal = false;
    OnClose.InvokeAsync(objRef);
}
void OnCancelClick()
{
    showModal = false;
    OnCancel.InvokeAsync(objRef);
}
void OnOkClick()
{
    showModal = false;
    OnOk.InvokeAsync(objRef);
}
}