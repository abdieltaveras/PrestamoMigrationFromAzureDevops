
<div>
    <label class="ml-2">@Text</label>
</div>
<div class="form-group row">
    @if (imageDataUrls.Count() >= ImageQty)
    {
        <label class="ml-4">Si desea agregar imagenes debe quitar de las que ya estan</label>
    }
    else
    {
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Imagenes</span>
            </div>
            <div class="custom-file">
                <InputFile OnChange="OnInputFileChange" accept="image/*" capture class=" custom-file-input " />
                @*<input type="file" class="custom-file-input" id="inputGroupFile01">*@
                <label class="custom-file-label" for="inputGroupFile01">Seleccionar Imagenes</label>
            </div>
        </div>

    }

    @*<InputFile @onclick="Validate" OnChange="OnInputFileChange" accept="image/*" capture multiple />*@
    @*@onclick:preventDefault="preventDefault"*@
</div>
<br />

<div class="image-list col-md-5">
    <table class="table">
        <tbody>
            <tr>
                @{

                    int imageIndex = 0;
                    @foreach (var imageDataUrl in imageDataUrls)
                    {
                        var sendIndex = imageIndex;
                        <td width="50%">
                            <img src="@imageDataUrl" />
                            <ConfirmationDialog ButtonText="Quitar"
                                                objRef="sendIndex"
                                                OnOk="QuitarImagen"
                                                Title="Confirmar Quitar Foto"
                                                ConfirmationMessage="Realmente desea quitar la foto" />

                        </td>
                        imageIndex++;
                    }
                }
            </tr>
        </tbody>
    </table>

</div>

@code {
    [Inject]
    IJSRuntime JsRuntime { get; set; }

    int imagelist = 0;
    JsInteropUtils JsInteropUtils { get; set; } = new JsInteropUtils();

    IList<string> imageDataUrls = new List<string>();

    [Parameter]
    public IEnumerable<string> ListaImagenesURL { get; set; } = new List<string>();

    [Parameter]
    public string MensajeLimiteImagenes { get; set; } = string.Empty;

    [Parameter]
    public string Text { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<IList<string>> OnImageSet { get; set; }

    [Parameter]
    public EventCallback<int> OnImagenRemove { get; set; }

    [Parameter]
    public int ImageQty { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.imageDataUrls = new List<string>();
        if (ListaImagenesURL.Count() > 0)
        {
            IList<string> listaEnviar = new List<string>();
            foreach (var item in ListaImagenesURL)
            {
                @*listaEnviar.Add(item);*@
                imageDataUrls.Add(item);
            }
            //imageDataUrls = listaEnviar;
        }
    }

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        if (imageFiles.Count >= ImageQty)
        {
            if (string.IsNullOrEmpty(MensajeLimiteImagenes))
            {
                MensajeLimiteImagenes = $"eligio {imageFiles.Count} imagenes, y solo se permiten {this.ImageQty}";
            }
            return;
        }
        var format = "image/png";
        foreach (var imageFile in imageFiles)
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);
        }
        await OnImageSet.InvokeAsync(imageDataUrls);
    }

    void QuitarImagen(object ob)
    {
        int imageIndex = (int)ob;
        imageDataUrls.RemoveAt(imageIndex);

        if (ListaImagenesURL.Count() > 0)
        {
            OnImageSet.InvokeAsync(imageDataUrls);
        }

        OnImagenRemove.InvokeAsync(imageIndex);
    }

}
