@using BlazorUtilsLibrary.Map
@using PrestamoBlazorApp.Models

@{
    if (!string.IsNullOrEmpty(this.direccion.SelectedLocalidad))
    {
        <MudChip Color="MudBlazor.Color.Info"> @direccion.SelectedLocalidad</MudChip>
        <MudButton OnClick="()=>{SearchLocalidad=!SearchLocalidad;}"Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" >Cambiar sector</MudButton>
    }
    
    if (SearchLocalidad)
    {
        <BuscarLocalidades OnLocalidadSelected="Handle_LocalidadSelected"></BuscarLocalidades>
    }
}
<MudGrid>
        <MudItem  xs="5">
        
            <MudTextField @bind-Value="direccion.Calle" Validation="@direccion.Calle" Label="Calle" />
            <MudTextField @bind-Value="direccion.Latitud" Validation="@direccion.Latitud" Label="Latitud" />
        
        </MudItem>
        <MudItem xs="5">
        
            <MudTextField @bind-Value="direccion.Longitud" Validation="@direccion.Longitud" Label="Longitud" />
            <MudTextField @bind-Value="direccion.Detalles" Validation="@direccion.Detalles" Label="otros Detalles" Lines="5" Variant="Variant.Filled" />
            <MudText Color="MudBlazor.Color.Primary">Area para el mapa</MudText>
        
        </MudItem>

</MudGrid>
@*<MudButton OnClick="UpdateMapMarkers" Color="MudBlazor.Color.Info">Actualizar Mapa</MudButton>*@
@*<Map Zoom="5" Markers="MapMarkers"></Map>*@

@code {

    [Parameter]
    public DireccionModel direccion { get; set; }
    BuscarLocalidad buscarLocalidad { get; set; } = new BuscarLocalidad();
    public List<Marker> MapMarkers { get; set; } = new List<Marker>();
    private int zoom = 10;
    private bool SearchLocalidad { get; set; }
    
    //void OnMapClick(GoogleMapClickEventArgs args)
    //{
    //    console.Log($"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
    //}

    protected override async Task OnInitializedAsync()
    {
        UpdateMapMarkers();
    }


    private void UpdateMapMarkers()
    {

        MapMarkers = new List<Marker>
        {
            new Marker {Description = "Cliente NombreCompleto",  ShowPopup = false, X = direccion.Longitud, Y=direccion.Latitud }
        };
        StateHasChanged();
    }



    private async Task Handle_LocalidadSelected(BuscarLocalidad localidad)
    {
        var localidadSeleccionada = localidad;
        direccion.IdLocalidad = localidad.IdLocalidad;
        direccion.SelectedLocalidad = localidad.ToString();
        this.SearchLocalidad = false;
        StateHasChanged();
    }

}


