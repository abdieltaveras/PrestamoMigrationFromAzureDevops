@using BlazorUtilsLibrary.Map
@using PrestamoBlazorApp.Models
<div class="row">

    <div class="col-sm-6">
        <h2> donde vive la persona ?</h2>
        <div class="form-group row">
            <BuscarLocalidades OnLocalidadSelected="Handle_LocalidadSelected"></BuscarLocalidades>
        </div>

        <div class="form-group row alert-info">
            <label class="col-sm-3 col-form-label text-label-align">Localidad </label>
            <label class="col-sm-8 mt-2"> @direccion.selectedLocalidad  </label>
        </div>


        <div class="form-group row">
            <label class="col-sm-3 col-form-label text-label-align">Calle</label>
            <InputText @bind-Value=@direccion.Calle class="col-sm-8" />
        </div>

        <div class="form-group row">
            <label class="col-sm-3 col-form-label text-label-align">Latitud</label>
            <InputNumber @bind-Value="@direccion.Latitud" class="col-sm-8" />

        </div>

        <div class="form-group row">
            <label class="col-sm-3 col-form-label text-label-align">Longitud</label>
            <InputNumber @bind-Value="@direccion.Longitud" class="col-sm-8" />
        </div>

        <div class="form-group row">
            <label class="col-sm-3 col-form-label text-label-align">Detalles</label>
            <InputTextArea @bind-Value=@direccion.Detalles class="col-sm-8" />
        </div>
    </div>
    <div class="col-sm-6">
        <h2>Mapa <button type="button" @onclick="UpdateMapMarkers">Actualizar</button></h2>
        <div class="track-order-map">
            <Map Zoom="10" Markers="MapMarkers"></Map>
        </div>

    </div>
</div>

@code {

    [Parameter]
    public DireccionModel direccion { get; set; }

    BuscarLocalidad buscarLocalidad { get; set; } = new BuscarLocalidad();


    public List<Marker> MapMarkers { get; set; } = new List<Marker>();

    int zoom = 10;
    bool showMadridMarker;
    EventConsole console;

    void OnMapClick(GoogleMapClickEventArgs args)
    {
        console.Log($"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
    }

    protected override async Task OnInitializedAsync()
    {
        UpdateMapMarkers();
    }

    
    private void UpdateMapMarkers()
    {

        MapMarkers = new List<Marker>
        {
            new Marker {Description = "Cliente NombreCompleto",  ShowPopup = false, X = direccion.Longitud, Y=direccion.Latitud }
        };
        StateHasChanged();
    }

    

    private void Handle_LocalidadSelected(BuscarLocalidad localidad)
    {
        var localidadSeleccionada = localidad;
        direccion.selectedLocalidad = localidad.ToString();
        this.direccion.IdLocalidad = localidad.IdLocalidad;
    }



}


